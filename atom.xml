<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t-hiroyoshi-blog</title>
  <subtitle>A tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://t-hiroyoshi.github.io/"/>
  <updated>2016-03-01T15:15:11.000Z</updated>
  <id>http://t-hiroyoshi.github.io/</id>
  
  <author>
    <name>Hiroyoshi Takahashi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CyberAgentさんのアドテクコンペで特別賞頂いた話</title>
    <link href="http://t-hiroyoshi.github.io/adtech-compe/"/>
    <id>http://t-hiroyoshi.github.io/adtech-compe/</id>
    <published>2016-03-01T16:22:05.000Z</published>
    <updated>2016-03-01T15:15:11.000Z</updated>
    
    <content type="html">&lt;p&gt;こんにちは、@t-hiroyoshiです。&lt;br&gt;ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。&lt;/p&gt;
&lt;p&gt;今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというものでした。&lt;br&gt;DSPとは飛んでくる入札のリクエストに対しいくらでどんな広告を出したいかを返すものです、なので求められるものとしては高トラフィック(今回は2000QPS)をさばきつつ配信する広告を選び適切な価格で入札できるものといった感じです。さらにDSPには応答速度も問われ今回は100ms以内にレスポンスが返せないものは無効になるという設定でした。最終的な評価はCPC(クリックあたりのコスト)と予算の消化率で行われました。&lt;/p&gt;
&lt;p&gt;参加した理由ですがそろそろプログラミングやり始めて1年だしハッカソン的なのに出てみたいなって思っていた時にScalaMatsuri2016で見かけたCyberAgentさんのホームページ見てみてみたら学生向けのハッカソンの参加者を募集していて、何か面白そうだし応募してみたところ参加権を貰えたというのが理由です。&lt;/p&gt;
&lt;h1 id=&quot;作ったもの-作ろうとしたもの&quot;&gt;&lt;a href=&quot;#作ったもの-作ろうとしたもの&quot; class=&quot;headerlink&quot; title=&quot;作ったもの(作ろうとしたもの)&quot;&gt;&lt;/a&gt;作ったもの(作ろうとしたもの)&lt;/h1&gt;&lt;p&gt;僕のチームはエンジニアの自分とデータサイエンティストのSou Konishi, Kouichi Takayamaの3人チームでした。お互いの強みを生かしつつなるべく依存し合わないような設計をしようと以下のようなアーキテクチャにしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/adtechArchitecture.png&quot; alt=&quot;architecture&quot; title=&quot;architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;最初はAWSに依存しすぎるのが嫌だったのでKinesisではなくKafka Cluster使いたかったのですが、時間的に厳しいと判断して大人しくKinesis使いました。またConsumer側はマイクロサービス群なので拡張性があり、新たな機能を追加しやすいかなとか考えました。&lt;br&gt;イメージとしてはScalaをマイクロサービスプラットフォーム的な立ち位置で置いてスケールさせたかった感じです。&lt;br&gt;Producer~Consumer間で評価モデルの受け渡しをどうするのか迷っていましたが、Kinesisを使うことにしたのでAWSどっぷりで良いやってなってめっちゃ早と噂のMemcachedをElastiCache上で使うことにしました。Memcached使ったことなかったのでどういう感じに使えば良いか分からずConsumer側(Python)でセットすると余計なヘッダが付いてくるとかに悩まされScalaのパーサー書くのが辛かったです。&lt;br&gt;評価モデルの生成はデータサイエンティストの2人がKinesisの強みを生かしたオンライン学習ベースで随時最新のモデルをExportできるようにしてくれました。僕はデータサイエンティストの2人がJupyter使ってデータこねくり回しているのを見てはーすっげってなってました。&lt;br&gt;AkkaにはKamonが仕込んであって、Actorの最適化や監視に使う予定でしたが時間切れで仕込んだだけになってしまいました。&lt;/p&gt;
&lt;p&gt;最終的に骨組みを作りきりProducer側も上手く分散化ができたのですが、評価モデルの読み込みフォーマットと評価モデルの展開式をミスって計算が爆発してメッセージ消化しきれなくてActor死にまくるみたいになってまともに動きませんでした、Kamon生かせなかった…&lt;br&gt;完全にエンジニアリソースが足りておらず作り込み不足でした、ごめんなさい。&lt;/p&gt;
&lt;p&gt;開発後にチームでプレゼンをする機会があったのですが、徹夜開発に加え本番でまともに動かなかった絶望感から頭おかしい感じのプレゼンになっていたと思います(笑)。&lt;br&gt;ですが、嬉しいことに技術選定や設計、オンライン学習などを評価して頂きなんと&lt;strong&gt;特別賞&lt;/strong&gt;を頂くことができました。&lt;/p&gt;
&lt;h1 id=&quot;感想と反省&quot;&gt;&lt;a href=&quot;#感想と反省&quot; class=&quot;headerlink&quot; title=&quot;感想と反省&quot;&gt;&lt;/a&gt;感想と反省&lt;/h1&gt;&lt;p&gt;今回はCyberAgentさん主催だったのでレッドブルを出してくれたりお菓子食べ放題だったりピザが食べられたり美味しいコーヒーを準備してくれたり環境としては至れり尽くせりで開発に集中することができました、感謝です。&lt;/p&gt;
&lt;p&gt;チームメイトとの絆も(徹夜の)開発を通して生まれてとても濃いハッカソンになりました。&lt;br&gt;今回は開発時間的に忙しすぎてメンターの方々とあまり交流できなかったので少し残念でしたが、Kinesisの情報を頂いたりできたので良かったです。&lt;br&gt;KinesisやMemcachedといった技術は使ったことがなかったものなのでこの機会に使えることができて良かったですが、初ハッカソンということで張り切りすぎて技術選定を大きくしすぎた感があってエンジニアリソースが足りず最後まで作り込めませんでした。今回参加してみて実際のリソース感を体感できたので次回に生かしたいと思います。ハッカソンに限ってはベンダロックインを許容してどっぷり浸かった方が他に集中できて楽とか色々なことを学びました。&lt;/p&gt;
&lt;p&gt;まとめると初ハッカソンは本番で動かないという絶望的な結果に終わりましたが、特別賞を貰えたので救われました。ハッカソン的な短期集中開発は自分の性格的にかなり楽しめたのでこれからもハッカソンに積極的に参加していきたいです。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、@t-hiroyoshiです。&lt;br&gt;ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。&lt;/p&gt;
&lt;p&gt;今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというも
    
    </summary>
    
    
      <category term="adtech" scheme="http://t-hiroyoshi.github.io/tags/adtech/"/>
    
      <category term="aws" scheme="http://t-hiroyoshi.github.io/tags/aws/"/>
    
      <category term="hackathon" scheme="http://t-hiroyoshi.github.io/tags/hackathon/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>ReactでDrag&amp;Drop</title>
    <link href="http://t-hiroyoshi.github.io/react-drag-drop/"/>
    <id>http://t-hiroyoshi.github.io/react-drag-drop/</id>
    <published>2015-12-14T13:00:00.000Z</published>
    <updated>2016-02-24T14:05:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ReactDnDについて&quot;&gt;&lt;a href=&quot;#ReactDnDについて&quot; class=&quot;headerlink&quot; title=&quot;ReactDnDについて&quot;&gt;&lt;/a&gt;ReactDnDについて&lt;/h1&gt;&lt;p&gt;Reactでdrag&amp;amp;dropコンポーネントを実装するのにおそらく一番有名(Redux作った人が作った)かつドキュメントが豊富なパッケージです。&lt;a href=&quot;http://gaearon.github.io/react-dnd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ドキュメント&lt;/a&gt;の情報量が結構多く自由度が高くて混乱しやすいので軽く使ってみたい人向けに核となるところだけ解説します。Danさん本当好き。&lt;/p&gt;
&lt;h1 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;p&gt;各コンポーネントをdrggable&amp;amp;droppable化するためのAPIがES7のdecoratorとして提供されています。&lt;br&gt;babel6使っている人はdecoratorがまだ公式では対応していないみたいなので注意してください(babel5なら大丈夫です)。公式じゃなければbabel6用のプラグイン作っている人がいたと思うので探してみてください。&lt;/p&gt;
&lt;h2 id=&quot;DragSource&quot;&gt;&lt;a href=&quot;#DragSource&quot; class=&quot;headerlink&quot; title=&quot;DragSource&quot;&gt;&lt;/a&gt;DragSource&lt;/h2&gt;&lt;p&gt;ドラッグされるコンポーネントについての設定を行える。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragSouce(type, spec, collect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DragComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: dorpされる側はここで設定した&lt;code&gt;type&lt;/code&gt;を見てdropを受け入れるか否かを決める、SymbolかString。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;: drag開始時の処理、drag終了時(dropされた時)の処理とかを書いたObject。例が後半にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collect&lt;/code&gt;: &lt;code&gt;DragComponent&lt;/code&gt;内で使う関数を取り出す関数でobjectを返す必要があります。connectとmonitorが引数として渡されます。ざっくり言うとconnectはDOMについて、monitorはdrag&amp;amp;dropの状態についてのObjectです、結構色々取れるので公式ドキュメント見てみてください。&lt;/p&gt;
&lt;h2 id=&quot;DropTarget&quot;&gt;&lt;a href=&quot;#DropTarget&quot; class=&quot;headerlink&quot; title=&quot;DropTarget&quot;&gt;&lt;/a&gt;DropTarget&lt;/h2&gt;&lt;p&gt;ドロップされるコンポーネントについての設定を行える。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DropTarget(types, spec, collect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DropComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;types&lt;/code&gt;: dropを受け入れる&lt;code&gt;type&lt;/code&gt;を設定する、SymbolかStringかArray。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;: dropを受け入れた時の処理やhoverされている時の処理を書いたObject。例が後半にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collect&lt;/code&gt;: DragSourceの&lt;code&gt;collect&lt;/code&gt;と同じ&lt;/p&gt;
&lt;h2 id=&quot;DragDropContext&quot;&gt;&lt;a href=&quot;#DragDropContext&quot; class=&quot;headerlink&quot; title=&quot;DragDropContext&quot;&gt;&lt;/a&gt;DragDropContext&lt;/h2&gt;&lt;p&gt;上記のコンポーネント達をこいつでラップすることで初めてdrag&amp;amp;dropができるようになる。Backendが必要。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTML5Backend &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd-html5-backend&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragDropContext &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragDropContext(HTML5Backend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DnDComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// DragComponent &amp;amp; DropComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例では&lt;code&gt;HTML5Backend&lt;/code&gt;を使っているのでタッチには対応していません。タッチ対応のBackendもあるのでタッチ対応させたい人は探してみてください。&lt;/p&gt;
&lt;h1 id=&quot;実装例&quot;&gt;&lt;a href=&quot;#実装例&quot; class=&quot;headerlink&quot; title=&quot;実装例&quot;&gt;&lt;/a&gt;実装例&lt;/h1&gt;&lt;p&gt;drag&amp;amp;dropするとメッセージを表示するコンポーネントを作ってみます。&lt;/p&gt;
&lt;h2 id=&quot;DnDItem-Componentを作る&quot;&gt;&lt;a href=&quot;#DnDItem-Componentを作る&quot; class=&quot;headerlink&quot; title=&quot;DnDItem Componentを作る&quot;&gt;&lt;/a&gt;DnDItem Componentを作る&lt;/h2&gt;&lt;p&gt;実際にdrag&amp;amp;dropされるコンポーネントを作ります。&lt;br&gt;DragSourceとDropTargetは同時に使うことでdragもdropもできるコンポーネントを作ることが可能です。&lt;/p&gt;
&lt;p&gt;drag&amp;amp;dropされたときのactionは親からpropsとして受け取ります。&lt;br&gt;またtypeも同様に親からpropsとして受け取っています。&lt;/p&gt;
&lt;p&gt;DragSourceとDropTarget間は基本的にmonitorを通して値のやり取りをします。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource, DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dragSpec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dragが始まったときの処理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  beginDrag(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dragされ始めたら自分のidを返す&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; id &amp;#125; = props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; id &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dragが終わったときの処置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  endDrag(props, monitor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// beginDragで返されたidを取ってくる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = monitor.getItem();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropSpecのdropで返されたidを取ってくる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; target = monitor.getDropResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropActionを発火させる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target) props.dropAction(source.id, target.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dropSpec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dropされたときの処理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  drop(props, monitor, component) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropされたら自分のidを返す&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; id &amp;#125; = props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; id &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// DropTargetとDragSourceを使っているのでdragもdropもできる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DropTarget(props =&amp;gt; props.type, dropSpec, connect =&amp;gt; (&amp;#123; connectDropTarget: connect.dropTarget() &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragSource(props =&amp;gt; props.type, dragSpec, connect =&amp;gt; (&amp;#123; connectDragSource: connect.dragSource() &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DnDItem&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  static propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connectDragSource: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connectDropTarget: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dropAction: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: React.PropTypes.string.isRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      connectDragSource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      connectDropTarget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connectDragSource(connectDropTarget(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DnDField-Componentを作る&quot;&gt;&lt;a href=&quot;#DnDField-Componentを作る&quot; class=&quot;headerlink&quot; title=&quot;DnDField Componentを作る&quot;&gt;&lt;/a&gt;DnDField Componentを作る&lt;/h2&gt;&lt;p&gt;DnDItem Componentをラップする親玉を作ります、stateはこのコンポーネントで管理して更新用のactionをDnDItemに渡します。&lt;/p&gt;
&lt;p&gt;今回はidをkeyとして渡しています、keyはReactDnD内部でのDOMの参照に使われるのでValueObjectである必要があります。あまりにも適当なものを渡すと壊れるので気をつけてください(React始めたばっかりの時Math.random()とか渡してて死にそうになった)。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import React from &quot;react&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import HTML5Backend from &quot;react-dnd-html5-backend&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; DragDropContext &amp;#125; from &quot;react-dnd&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import DnDItem from &quot;./DnDItem&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// DragDropContextでラップする&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragDropContext(HTML5Backend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export default class DnDField extends React.Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &quot;1&quot;, name: &quot;foo&quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &quot;2&quot;, name: &quot;bar&quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &quot;3&quot;, name: &quot;bad&quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &quot;4&quot;, name: &quot;qux&quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      message: &quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dropAction(sourceId, targetId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123; list &amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // message更新 Redux使うならここでaction, それぞれのidが渡ってくる&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const sourceName = list.find(item =&amp;gt; item.id === sourceId).name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const targetName = list.find(item =&amp;gt; item.id === targetId).name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setState(&amp;#123;message: `$&amp;#123;sourceName&amp;#125; dropped on $&amp;#123;targetName&amp;#125;`&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123; list, message &amp;#125; = this.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const itemType = Symbol(&quot;item&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;&amp;#123;message&amp;#125;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#123;list.map(item =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;DnDItem id=&amp;#123;item.id&amp;#125; name=&amp;#123;item.name&amp;#125; type=&amp;#123;itemType&amp;#125; dropAction=&amp;#123;::this.dropAction&amp;#125; key=&amp;#123;item.id&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;まとめ&quot;&gt;&lt;a href=&quot;#まとめ&quot; class=&quot;headerlink&quot; title=&quot;まとめ&quot;&gt;&lt;/a&gt;まとめ&lt;/h2&gt;&lt;p&gt;これでdragされたComponentのidとdropされたComponentのidが取得できる実装が出来ました。idが取得できればあとはどうにでもできるので実際の開発に生かすことができればと思います。&lt;/p&gt;
&lt;p&gt;今回紹介したのはReactDnDのほんの一部で他にもたくさんのオプションがあるので是非ドキュメントを読んでカスタムしてみてください。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ReactDnDについて&quot;&gt;&lt;a href=&quot;#ReactDnDについて&quot; class=&quot;headerlink&quot; title=&quot;ReactDnDについて&quot;&gt;&lt;/a&gt;ReactDnDについて&lt;/h1&gt;&lt;p&gt;Reactでdrag&amp;amp;dropコンポーネントを実装す
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://t-hiroyoshi.github.io/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>Hexoを使って無料でブログを公開する</title>
    <link href="http://t-hiroyoshi.github.io/start-hexo/"/>
    <id>http://t-hiroyoshi.github.io/start-hexo/</id>
    <published>2015-11-19T13:14:39.000Z</published>
    <updated>2016-02-24T14:05:11.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;なぜHexoなのか&quot;&gt;&lt;a href=&quot;#なぜHexoなのか&quot; class=&quot;headerlink&quot; title=&quot;なぜHexoなのか&quot;&gt;&lt;/a&gt;なぜHexoなのか&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.jsでやれる&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に静的サイトを構築できる&lt;/li&gt;
&lt;li&gt;テーマが多くて完成度が高い、さらにカスタムできる&lt;/li&gt;
&lt;li&gt;Markdownで記事が書けるので嬉しいよ!&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Hexoを使ってブログを公開するまでの手順&quot;&gt;&lt;a href=&quot;#Hexoを使ってブログを公開するまでの手順&quot; class=&quot;headerlink&quot; title=&quot;Hexoを使ってブログを公開するまでの手順&quot;&gt;&lt;/a&gt;Hexoを使ってブログを公開するまでの手順&lt;/h1&gt;&lt;h2 id=&quot;Hexoをインストールする&quot;&gt;&lt;a href=&quot;#Hexoをインストールする&quot; class=&quot;headerlink&quot; title=&quot;Hexoをインストールする&quot;&gt;&lt;/a&gt;Hexoをインストールする&lt;/h2&gt;&lt;p&gt;まずはnpmでHexoをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にブログの雛形を作成して依存パッケージをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init &amp;lt;your-blog-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;your-blog-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ここまでくれば実際にページを見ることが可能です、&lt;code&gt;hexo server&lt;/code&gt;と打った後&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;localhost:4000&lt;/a&gt;にアクセスしてみてください。デフォルトのテーマなので好みはあると思いますが、テーマは後で変えられるので安心してください!&lt;/p&gt;
&lt;h2 id=&quot;Github-Pagesでブログを公開する&quot;&gt;&lt;a href=&quot;#Github-Pagesでブログを公開する&quot; class=&quot;headerlink&quot; title=&quot;Github Pagesでブログを公開する&quot;&gt;&lt;/a&gt;Github Pagesでブログを公開する&lt;/h2&gt;&lt;p&gt;ブログをGitHub Pagesを利用して公開してみようと思います、まずは&lt;code&gt;&amp;lt;user-name&amp;gt;.github.io&lt;/code&gt;という名前のレポジトリを作成します。&lt;br&gt;デプロイはGitで行いたいと思うのでプラグインをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にレポジトリの登録を行います、先ほど作成した雛形の中にある&lt;code&gt;_config.yml&lt;/code&gt;を下記のように編集してください。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Deployment&amp;#10;deploy:&amp;#10;  type: git&amp;#10;  repo: git@github.com:&amp;#60;user-name&amp;#62;/&amp;#60;user-name&amp;#62;.github.io.git&amp;#10;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これでブログを公開する準備は完了です、デプロイしてみましょう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;無事にデプロイできたら&lt;code&gt;http://&amp;lt;user-name&amp;gt;.github.io&lt;/code&gt;にアクセスしてみてください、ブログが表示されれば成功です!&lt;/p&gt;
&lt;h2 id=&quot;記事の追加をする&quot;&gt;&lt;a href=&quot;#記事の追加をする&quot; class=&quot;headerlink&quot; title=&quot;記事の追加をする&quot;&gt;&lt;/a&gt;記事の追加をする&lt;/h2&gt;&lt;p&gt;記事の追加は下記のコマンドを打つことで可能です、タイトルがそのままファイル名になるので日本語などは避けたほうが良いです。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;page-title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;そうすると&lt;code&gt;source/_posts&lt;/code&gt;の中に&lt;code&gt;page-title.md&lt;/code&gt;ができていると思います、Markdownでゴリゴリ中身を書きましょう。&lt;code&gt;hexo server&lt;/code&gt;でサーバーを動かしながら書くとブラウザをリロードするたびに更新されていくのでプレビュー代わりに使えます。&lt;br&gt;記事を書き終えたら公開して、Github Pagesにアクセスして実際に見てみてください。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;テーマをインストールする&quot;&gt;&lt;a href=&quot;#テーマをインストールする&quot; class=&quot;headerlink&quot; title=&quot;テーマをインストールする&quot;&gt;&lt;/a&gt;テーマをインストールする&lt;/h2&gt;&lt;p&gt;まずはGithubなどで導入したいテーマを見つけてきてください、多分&lt;code&gt;hexo theme&lt;/code&gt;とかで検索するとたくさん出てくると思います。細かい部分は自分で変更できるのでだいたい雰囲気で選んで良いと思います。良い感じのテーマが見つかったらクローンしてきます。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git@github.com:&amp;lt;theme-auther&amp;gt;/&amp;lt;theme-name&amp;gt;.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次に先ほどの&lt;code&gt;_config.yml&lt;/code&gt;を書き換えます。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Extensions&amp;#10;theme: &amp;#60;theme-name&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これでテーマが適応されました、&lt;code&gt;hexo server&lt;/code&gt;して実際に見てみてください。&lt;br&gt;テーマの細かい設定はそれぞれのテーマの&lt;code&gt;themes/&amp;lt;theme-name&amp;gt;/_config.yml&lt;/code&gt;を変更することで可能です。&lt;br&gt;ある程度気にいる形になったらデプロイして公開しましょう!&lt;/p&gt;
&lt;p&gt;テーマやスタイルシートを変更した後にデプロイしてもデザインが変更されないことがあると思いますが、これは下のコマンドで解決することができます。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;この後に再びデプロイしてみてください、テーマやデザインシートの変更が反映されていると思います!&lt;/p&gt;
&lt;h1 id=&quot;まとめ&quot;&gt;&lt;a href=&quot;#まとめ&quot; class=&quot;headerlink&quot; title=&quot;まとめ&quot;&gt;&lt;/a&gt;まとめ&lt;/h1&gt;&lt;p&gt;Hexoを使ってブログを公開する方法を書きました。&lt;br&gt;Hexoは静的サイトの構築が本当に簡単にできる素晴らしいツールだと思います、テーマも非常に完成度が高いものが多いので一瞬にしてそれなりにちゃんとしたブログが作れてしまうのは本当に驚きです。&lt;br&gt;ただHexoを使っていてひとつ辛いのは中国圏のユーザーが多いので英語ではなく中国語のドキュメント、ディスカッションが多いという点です、英語ならそれなりに読めますが中国語は辛い…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;なぜHexoなのか&quot;&gt;&lt;a href=&quot;#なぜHexoなのか&quot; class=&quot;headerlink&quot; title=&quot;なぜHexoなのか&quot;&gt;&lt;/a&gt;なぜHexoなのか&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.jsでやれる&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に静的サイトを構築
    
    </summary>
    
    
      <category term="github" scheme="http://t-hiroyoshi.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://t-hiroyoshi.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
