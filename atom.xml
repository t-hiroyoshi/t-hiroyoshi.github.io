<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t-hiroyoshi-blog</title>
  <subtitle>A tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://t-hiroyoshi.github.io/"/>
  <updated>2016-08-04T10:09:52.000Z</updated>
  <id>http://t-hiroyoshi.github.io/</id>
  
  <author>
    <name>Hiroyoshi Takahashi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Akka HTTP is faster than Spray now</title>
    <link href="http://t-hiroyoshi.github.io/akka-http-is-faster-than-spray/"/>
    <id>http://t-hiroyoshi.github.io/akka-http-is-faster-than-spray/</id>
    <published>2016-08-04T07:15:07.000Z</published>
    <updated>2016-08-04T10:09:52.000Z</updated>
    
    <content type="html">&lt;p&gt;こんにちは、t-hiroyoshiです。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;http://akka.io/news/2016/08/02/akka-2.4.9-RC1-released.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akka 2.4.9-RC1&lt;/a&gt;がリリースされました。&lt;br&gt;今回のリリースはAkka HTTPのパフォーマンス改善に焦点を絞ったアップデートでAkka HTTPのパフォーマンスがSprayと同等かそれ以上になったと書かれています。&lt;/p&gt;
&lt;h2 id=&quot;Akka-HTTP-revenge&quot;&gt;&lt;a href=&quot;#Akka-HTTP-revenge&quot; class=&quot;headerlink&quot; title=&quot;Akka HTTP revenge&quot;&gt;&lt;/a&gt;Akka HTTP revenge&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/spray-akka-benchmark&quot;&gt;以前&lt;/a&gt;Akka HTTPとSpray-canのベンチマークを取った時はSprayに軍配が上がりましたが、今回のアップデートはどれほどのものなのか軽く調べるために再度Akka HTTPのみベンチマークを取りました(Sprayはもう更新されていません)。&lt;/p&gt;
&lt;p&gt;コードやベンチマーク環境は前回と同じ状態でAkkaのバージョンのみ上げています。&lt;/p&gt;
&lt;h3 id=&quot;Result&quot;&gt;&lt;a href=&quot;#Result&quot; class=&quot;headerlink&quot; title=&quot;Result&quot;&gt;&lt;/a&gt;Result&lt;/h3&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This is ApacheBench, Version &lt;span class=&quot;number&quot;&gt;2.3&lt;/span&gt; &amp;lt;$Revision: &lt;span class=&quot;number&quot;&gt;1706008&lt;/span&gt; $&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Software:        akka-&lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;-RC1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Hostname:        localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Port:            &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Path:          /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Length:        &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Concurrency Level:      &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time taken &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; tests:   &lt;span class=&quot;number&quot;&gt;0.336&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;seconds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Complete requests:      &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failed requests:        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keep-Alive requests:    &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total transferred:      &lt;span class=&quot;number&quot;&gt;1820000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTML transferred:       &lt;span class=&quot;number&quot;&gt;120000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requests per &lt;span class=&quot;keyword&quot;&gt;second&lt;/span&gt;:    &lt;span class=&quot;number&quot;&gt;29805.82&lt;/span&gt; [&lt;span class=&quot;comment&quot;&gt;#/sec] (mean)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       &lt;span class=&quot;number&quot;&gt;0.336&lt;/span&gt; [ms] (mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       &lt;span class=&quot;number&quot;&gt;0.034&lt;/span&gt; [ms] (mean, across all concurrent requests)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer rate:          &lt;span class=&quot;number&quot;&gt;5297.52&lt;/span&gt; [Kbytes/&lt;span class=&quot;built_in&quot;&gt;sec&lt;/span&gt;] received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection Times (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;  mean[+/-sd] &lt;span class=&quot;built_in&quot;&gt;median&lt;/span&gt;   &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connect:        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing:     &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting:        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:          &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;      &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Percentage &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; requests served &lt;span class=&quot;keyword&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; certain &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;95&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;%     &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; (longest request)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前回のベンチマークではSpray-canが23230.85 req/secでSpray-canの方がパフォーマンスが良かったですが、今回Akka HTTPは29805.82 req/secというSpray-canを越す数値を叩き出しました。&lt;br&gt;前回のベンチマークから4ヶ月ぐらいしか経っていないのにこんなに速くなるとは驚きです。&lt;/p&gt;
&lt;h2 id=&quot;Next-steps-for-Akka-HTTP&quot;&gt;&lt;a href=&quot;#Next-steps-for-Akka-HTTP&quot; class=&quot;headerlink&quot; title=&quot;Next steps for Akka HTTP&quot;&gt;&lt;/a&gt;Next steps for Akka HTTP&lt;/h2&gt;&lt;p&gt;今後のAkka HTTPのことについては、Sprayの終末とAkka HTTPへの置き換えを推奨していて近いうちにexperimentalが外れるようです。&lt;br&gt;HTTP/2についても今後やっていくようで&lt;a href=&quot;https://github.com/akka/akka-meta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ここ&lt;/a&gt;から追えます。&lt;br&gt;期待しながら待ちたいと思います。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;http://akka.io/news/2016/08/02/akka-2.4.9-RC1-released.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akka 2
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
      <category term="benchmark" scheme="http://t-hiroyoshi.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>Scala NativeのデモをDocker上で動かす</title>
    <link href="http://t-hiroyoshi.github.io/scala-native-demo-docker/"/>
    <id>http://t-hiroyoshi.github.io/scala-native-demo-docker/</id>
    <published>2016-07-14T04:23:02.000Z</published>
    <updated>2016-07-26T06:17:05.000Z</updated>
    
    <content type="html">&lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;最近は&lt;a href=&quot;http://event.scaladays.org/scaladays-nyc-2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scala Days 2016 NYC&lt;/a&gt;で発表された&lt;a href=&quot;https://github.com/scala-native/scala-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scala Native&lt;/a&gt;にコントリビュートしています。Scalaのような強力な言語がbare metalで動くのは素晴らしい事だと思っているので早く実用レベルで動くようにこれからも積極的に貢献していきたいです。&lt;/p&gt;
&lt;p&gt;そんな訳で今回は布教を兼ねてScala NativeのデモをDocker上で簡単に動かす方法を紹介したいと思います。&lt;/p&gt;
&lt;h1 id=&quot;Scala-Native&quot;&gt;&lt;a href=&quot;#Scala-Native&quot; class=&quot;headerlink&quot; title=&quot;Scala Native&quot;&gt;&lt;/a&gt;Scala Native&lt;/h1&gt;&lt;p&gt;Scala Nativeとは何かと言うと、ScalaのコードをLLVMのIR経由でコンパイルしてNative実行可能にするAOTコンパイラ(AheadOfTimeCompiler)実装です。&lt;br&gt;一部低級な処理向けにScalaを拡張しているのである意味別言語と言っても過言ではないかもしれません。&lt;br&gt;これらの拡張によってScalaをSystem level languageに落とし込めるのでその気になればScalaで何でも作れるわけで、とても未来が楽しみです。&lt;/p&gt;
&lt;p&gt;ただREADMEに&lt;code&gt;pre-release stage&lt;/code&gt;とあるようにまだ完全にScala-likeには動きません、ですが活発にIssueやPull reqが飛んでいるので近いうちにまともに動くようになると思っています。(まだ完成していない今ならコントリビュートのチャンス?)&lt;/p&gt;
&lt;p&gt;現在はLLVM(Clang)とBOEHM GCをローカル環境に依存しているのでデモを動かすまでにそれらのパスが通らなかったり、依存解決で結構躓く人が多いみたいです。&lt;br&gt;そこでScala Nativeのレポジトリ内にあるDockerfileを使って作ったコンテナ内でデモを動かしてみたいと思います。管理用のスクリプトもきちんとあるので比較的簡単に動かす事が可能です。&lt;/p&gt;
&lt;h1 id=&quot;手順&quot;&gt;&lt;a href=&quot;#手順&quot; class=&quot;headerlink&quot; title=&quot;手順&quot;&gt;&lt;/a&gt;手順&lt;/h1&gt;&lt;h2 id=&quot;docker-machineを立てる-Option&quot;&gt;&lt;a href=&quot;#docker-machineを立てる-Option&quot; class=&quot;headerlink&quot; title=&quot;docker-machineを立てる(Option)&quot;&gt;&lt;/a&gt;docker-machineを立てる(Option)&lt;/h2&gt;&lt;p&gt;なるべくローカルの環境を汚染したくないのでdocker-machineでDockerホストを立てます。&lt;br&gt;driverは&lt;code&gt;virtualbox&lt;/code&gt;を使っていますが&lt;code&gt;vmwarefusion&lt;/code&gt;で立てた方がもしかしたら&lt;a href=&quot;http://qiita.com/suin/items/c4ba1cfd354586bbed59&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;速い&lt;/a&gt;かもです(Scalaはcompile時間が長いと言われている)。&lt;br&gt;メモリを指定しないと1Gしか割り当てられないので増やしておきます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker-machine create -d virtualbox --virtualbox-memory 2048 scalanative&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;docker-machineが立ち上がったらsshで繋ぎます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker-machine ssh scala-native&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;管理用のスクリプトはbashで動くのですが、Boot2Dockerは標準でbashが入っていないので次に進む前に&lt;a href=&quot;https://t-hiroyoshi.github.io/docker-machine-bash/&quot;&gt;ここ&lt;/a&gt;を参考にbashをインストールしてください。&lt;/p&gt;
&lt;h2 id=&quot;Scala-Nativeのコンテナイメージをビルドする&quot;&gt;&lt;a href=&quot;#Scala-Nativeのコンテナイメージをビルドする&quot; class=&quot;headerlink&quot; title=&quot;Scala Nativeのコンテナイメージをビルドする&quot;&gt;&lt;/a&gt;Scala Nativeのコンテナイメージをビルドする&lt;/h2&gt;&lt;p&gt;まずはともかくScala Nativeのソースをcloneしてきます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https://github.com/scala-native/scala-native.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;scala-native/docker&lt;/code&gt;の中にDockerfileがあるので移動して管理用のスクリプトを叩きます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cd scala-native/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./manage.sh build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;色々ダウンロードしたりするので結構時間がかかります。&lt;/p&gt;
&lt;p&gt;時間がかかります辛抱強く待って下さい、コーヒーでも飲んでいれば良いと思います。&lt;br&gt;ビルドが終わったらいよいよデモを動かします。&lt;/p&gt;
&lt;h2 id=&quot;Scala-Nativeのデモを実行する&quot;&gt;&lt;a href=&quot;#Scala-Nativeのデモを実行する&quot; class=&quot;headerlink&quot; title=&quot;Scala Nativeのデモを実行する&quot;&gt;&lt;/a&gt;Scala Nativeのデモを実行する&lt;/h2&gt;&lt;p&gt;スクリプトを叩いてビルドしたコンテナの中に入ります。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./manage.sh run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ここでエラーが出てsbtプロジェクトが読み込まれない方は&lt;code&gt;scala-native/&lt;/code&gt;配下のtargetフォルダを全て削除してみてください。&lt;br&gt;コンテナに入れたらsbtを起動してデモがあるdemoNativeプロジェクトを指定します。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sbt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; project demoNative&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; run&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;後は&lt;code&gt;run&lt;/code&gt;すればデモが動き出してコンパイルされたバイナリが&lt;code&gt;scala-native/demo/native/target/scala-2.11/demonative-out&lt;/code&gt;に吐き出されているはずです。&lt;/p&gt;
&lt;p&gt;これはそのまま実行できるのでいろいろ試してみてください。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;最近は&lt;a href=&quot;http://event.scaladays.org/scaladays-nyc-2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scala Days 2016 NYC&lt;/a&gt;
    
    </summary>
    
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="docker" scheme="http://t-hiroyoshi.github.io/tags/docker/"/>
    
      <category term="scala-native" scheme="http://t-hiroyoshi.github.io/tags/scala-native/"/>
    
  </entry>
  
  <entry>
    <title>Docker Machineでbashを使えるようにする</title>
    <link href="http://t-hiroyoshi.github.io/docker-machine-bash/"/>
    <id>http://t-hiroyoshi.github.io/docker-machine-bash/</id>
    <published>2016-06-19T14:22:43.000Z</published>
    <updated>2016-06-20T09:07:39.000Z</updated>
    
    <content type="html">&lt;p&gt;Docker Machineめっちゃ便利ですがBoot2Docker上で作業をしている時、コンテナをShell Scriptで管理していて困ったことありませんか?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker@dev:/Users/t-hiroyoshi/git/some-project/docker$ ./manage.sh build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;env: can&amp;apos;t execute &amp;apos;bash&amp;apos;: No such file or directory&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bashがBoot2Dockerに入ってない!これは困る!ということでBoot2Dockerにbashを入れる方法です。&lt;br&gt;Boot2Dockerは&lt;a href=&quot;http://tinycorelinux.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tiny Core Linux&lt;/a&gt;ベースで動いているのでそのパッケージ管理システム(&lt;a href=&quot;http://wiki.tinycorelinux.net/wiki:tce-load&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tce-load&lt;/a&gt;)を利用してあげれば万事解決です。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker@dev:/Users/t-hiroyoshi/git/some-project/docker$ tce-load -wi bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これでbashが使えるようになったのでbash Shell Scriptが使えます。&lt;br&gt;Docker Machine(Boot2Docker)上に状態を持つのはあまり良くない気がしますがまあbashぐらいはあってもいいのではと思いました。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Machineめっちゃ便利ですがBoot2Docker上で作業をしている時、コンテナをShell Scriptで管理していて困ったことありませんか?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="docker" scheme="http://t-hiroyoshi.github.io/tags/docker/"/>
    
      <category term="shell" scheme="http://t-hiroyoshi.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Akka HTTP vs Spray</title>
    <link href="http://t-hiroyoshi.github.io/spray-akka-benchmark/"/>
    <id>http://t-hiroyoshi.github.io/spray-akka-benchmark/</id>
    <published>2016-04-15T13:01:19.000Z</published>
    <updated>2016-08-04T07:25:56.000Z</updated>
    
    <content type="html">&lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;今回は&lt;a href=&quot;http://t-hiroyoshi.github.io/akka-http-api/&quot;&gt;前回紹介&lt;/a&gt;した&lt;a href=&quot;http://doc.akka.io/docs/akka/2.4.4/scala/http/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akka HTTP&lt;/a&gt;の性能が気になったのでざっくりベンチマークを取ってみました。&lt;br&gt;ソースコードは&lt;a href=&quot;https://github.com/t-hiroyoshi/akka-http-vs-spray&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;にあげました。&lt;/p&gt;
&lt;p&gt;それぞれのバージョン等は以下の通りです。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// sbt.version = 0.13.11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// addSbtPlugin(&quot;io.spray&quot; % &quot;sbt-revolver&quot; % &quot;0.8.0&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// addSbtPlugin(&quot;com.eed3si9n&quot; % &quot;sbt-assembly&quot; % &quot;0.14.2&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; commonSettings = &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name := &lt;span class=&quot;string&quot;&gt;&quot;akka-http-vs-spray&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  version := &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scalaVersion := &lt;span class=&quot;string&quot;&gt;&quot;2.11.8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scalacOptions := &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;-unchecked&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-deprecation&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-encoding&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Xlint&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; akkaV = &lt;span class=&quot;string&quot;&gt;&quot;2.4.4&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; sprayV = &lt;span class=&quot;string&quot;&gt;&quot;1.3.3&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; spraySettings = &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  libraryDependencies ++= &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt;   %%  &lt;span class=&quot;string&quot;&gt;&quot;akka-actor&quot;&lt;/span&gt;    % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;io.spray&quot;&lt;/span&gt;            %%  &lt;span class=&quot;string&quot;&gt;&quot;spray-can&quot;&lt;/span&gt;     % sprayV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;io.spray&quot;&lt;/span&gt;            %%  &lt;span class=&quot;string&quot;&gt;&quot;spray-routing&quot;&lt;/span&gt; % sprayV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; akkaSettings = &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  libraryDependencies ++= &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-actor&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-stream&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-http-experimental&quot;&lt;/span&gt; % akkaV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; sprayServer = (project in file(&lt;span class=&quot;string&quot;&gt;&quot;spray-server&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(commonSettings: _*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(spraySettings: _*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(assemblyOutputPath in assembly := file(&lt;span class=&quot;string&quot;&gt;&quot;./spray-server.jar&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; akkaServer = (project in file(&lt;span class=&quot;string&quot;&gt;&quot;akka-server&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(commonSettings: _*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(akkaSettings: _*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.settings(assemblyOutputPath in assembly := file(&lt;span class=&quot;string&quot;&gt;&quot;./akka-server.jar&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Revolver&lt;/span&gt;.settings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java version &amp;quot;1.8.0_71&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java(TM) SE Runtime Environment (build 1.8.0_71-b15)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;sbt assembly&lt;/code&gt;したjarをローカルで&lt;code&gt;java -jar&lt;/code&gt;してベンチマークをとりました。&lt;/p&gt;
&lt;p&gt;ローカル環境&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MacBook Pro (Retina, 13-inch, Early 2015)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OS: OSX 10.11.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processor: 3.1 GHz Intel Core i7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Memory: 16 GB 1867 MHz DDR3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ベンチマークにはApacheBenchを用いました。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ab -k -c 10 -n 10000 http://localhost:8080/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下それぞれの結果です。&lt;/p&gt;
&lt;h2 id=&quot;Akka-HTTP&quot;&gt;&lt;a href=&quot;#Akka-HTTP&quot; class=&quot;headerlink&quot; title=&quot;Akka HTTP&quot;&gt;&lt;/a&gt;Akka HTTP&lt;/h2&gt;&lt;h3 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; akka.server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.actor.&lt;span class=&quot;type&quot;&gt;ActorSystem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.&lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.server.&lt;span class=&quot;type&quot;&gt;Directives&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.stream.&lt;span class=&quot;type&quot;&gt;ActorMaterializer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Boot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; system = &lt;span class=&quot;type&quot;&gt;ActorSystem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;akka-server&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; materializer = &lt;span class=&quot;type&quot;&gt;ActorMaterializer&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; ec = system.dispatcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; route =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pathSingleSlash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;().bindAndHandle(route, &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Result&quot;&gt;&lt;a href=&quot;#Result&quot; class=&quot;headerlink&quot; title=&quot;Result&quot;&gt;&lt;/a&gt;Result&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1706008 $&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Software:        akka-http/2.4.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Hostname:        localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Port:            8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Path:          /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Length:        12 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Concurrency Level:      10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time taken for tests:   0.465 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Complete requests:      10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failed requests:        0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keep-Alive requests:    10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total transferred:      1780000 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTML transferred:       120000 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requests per second:    21490.49 [#/sec] (mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       0.465 [ms] (mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       0.047 [ms] (mean, across all concurrent requests)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer rate:          3735.65 [Kbytes/sec] received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection Times (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              min  mean[+/-sd] median   max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connect:        0    0   0.0      0       0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing:     0    0   1.0      0      42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting:        0    0   1.0      0      42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:          0    0   1.0      0      42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Percentage of the requests served within a certain time (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  50%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  66%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  75%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  80%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  90%      1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  95%      1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  98%      2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  99%      3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 100%     42 (longest request)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Spray-can&quot;&gt;&lt;a href=&quot;#Spray-can&quot; class=&quot;headerlink&quot; title=&quot;Spray-can&quot;&gt;&lt;/a&gt;Spray-can&lt;/h2&gt;&lt;h3 id=&quot;Code-1&quot;&gt;&lt;a href=&quot;#Code-1&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h3&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; spray.server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.actor._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.io.&lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; spray.can.&lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; spray.routing._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; spray.http._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.pattern.ask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.util.&lt;span class=&quot;type&quot;&gt;Timeout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.duration._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Boot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; system = &lt;span class=&quot;type&quot;&gt;ActorSystem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;spray-server&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; timeout = &lt;span class=&quot;type&quot;&gt;Timeout&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;seconds)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; service = system.actorOf(&lt;span class=&quot;type&quot;&gt;Props&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;ServiceActor&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;spray-service&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;IO&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;) ? &lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Bind&lt;/span&gt;(service, &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceActor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Actor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HttpService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; route =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pathSingleSlash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;actorRefFactory&lt;/span&gt; &lt;/span&gt;= context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;receive&lt;/span&gt; &lt;/span&gt;= runRoute(route)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Result-1&quot;&gt;&lt;a href=&quot;#Result-1&quot; class=&quot;headerlink&quot; title=&quot;Result&quot;&gt;&lt;/a&gt;Result&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1706008 $&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Software:        spray-can/1.3.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Hostname:        localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server Port:            8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Path:          /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Document Length:        12 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Concurrency Level:      10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time taken for tests:   0.430 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Complete requests:      10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failed requests:        0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keep-Alive requests:    10000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total transferred:      1780000 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTML transferred:       120000 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Requests per second:    23230.85 [#/sec] (mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       0.430 [ms] (mean)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time per request:       0.043 [ms] (mean, across all concurrent requests)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer rate:          4038.18 [Kbytes/sec] received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection Times (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              min  mean[+/-sd] median   max&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connect:        0    0   0.0      0       0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing:     0    0   0.9      0      20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting:        0    0   0.9      0      20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:          0    0   0.9      0      20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Percentage of the requests served within a certain time (ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  50%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  66%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  75%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  80%      0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  90%      1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  95%      1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  98%      2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  99%      3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 100%     20 (longest request)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;まとめ&quot;&gt;&lt;a href=&quot;#まとめ&quot; class=&quot;headerlink&quot; title=&quot;まとめ&quot;&gt;&lt;/a&gt;まとめ&lt;/h2&gt;&lt;p&gt; Akka HTTPが21490.49 req/sec、Spray-canが23230.85 req/secと割と近い数値が出た気がします。&lt;br&gt; Akka HTTPは前もっと使い物にならないくらい遅かったイメージだったんですがこれなら十分なリクエストがさばけそうです。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;今回は&lt;a href=&quot;http://t-hiroyoshi.github.io/akka-http-api/&quot;&gt;前回紹介&lt;/a&gt;した&lt;a href=&quot;http://doc.akka.io/docs/akka/2.4.4/sc
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
      <category term="benchmark" scheme="http://t-hiroyoshi.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>Akka-HTTPでREST APIを作る</title>
    <link href="http://t-hiroyoshi.github.io/akka-http-api/"/>
    <id>http://t-hiroyoshi.github.io/akka-http-api/</id>
    <published>2016-04-12T08:21:04.000Z</published>
    <updated>2016-04-18T06:09:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Akka-HTTP&quot;&gt;&lt;a href=&quot;#Akka-HTTP&quot; class=&quot;headerlink&quot; title=&quot;Akka-HTTP&quot;&gt;&lt;/a&gt;Akka-HTTP&lt;/h1&gt;&lt;p&gt;Akka-HTTPはAkka-ActorとAkka-StreamsをベースとしたAkkaのHTTP moduleです。&lt;br&gt;異なるレベルでのAPIを提供してくれているので高レベルから低レベルなところまでカスタムすることができて良いです。&lt;br&gt;あとは&lt;a href=&quot;http://spray.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spray&lt;/a&gt;の開発チームがLightbend(旧Typesafe)にそのまま移行して開発している(?)ので割とSprayのAPI、DSLに似ている部分が多かったりしてSpray使ったことがある人は移行しやすいと思います。パフォーマンスは最近はSprayに迫るところまで来ていて実用に足るところまで来ているのでは無いでしょうか。&lt;br&gt;Akka-HTPPは幾つかのmoduleから成り立っていてそれぞれを軽く説明すると以下の感じになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;akka-http-core: ほとんどが低レベルで構成されていてhttp server, clientのためのmodule(WebSocketsも含む)&lt;/li&gt;
&lt;li&gt;akka-http: 高レベルな関数やhttp serverのAPI定義などに使用出来るDSLを含んでいるmodule&lt;/li&gt;
&lt;li&gt;akka-http-testkit: http serverのためのテストツールmodule&lt;/li&gt;
&lt;li&gt;akka-http-spray-json: JSONのシリアライズ、デシリアライズのためのmodule&lt;/li&gt;
&lt;li&gt;akka-http-xml: XMLのシリアライズ、デシリアライズのためのmodule&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;実装&quot;&gt;&lt;a href=&quot;#実装&quot; class=&quot;headerlink&quot; title=&quot;実装&quot;&gt;&lt;/a&gt;実装&lt;/h1&gt;&lt;p&gt;UserのCRUDができるREST APIを作ってみます。&lt;br&gt;ソースコードは&lt;a href=&quot;https://github.com/t-hiroyoshi/akka-http-standalone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;にあげておきました。&lt;/p&gt;
&lt;h2 id=&quot;sbt&quot;&gt;&lt;a href=&quot;#sbt&quot; class=&quot;headerlink&quot; title=&quot;sbt&quot;&gt;&lt;/a&gt;sbt&lt;/h2&gt;&lt;p&gt;まずはplugin.sbtを書きます。&lt;br&gt;sbt-assemblyはStand-aloneなjarを作るのに使用します。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logLevel := &lt;span class=&quot;type&quot;&gt;Level&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Warn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addSbtPlugin(&lt;span class=&quot;string&quot;&gt;&quot;io.spray&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;sbt-revolver&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;0.8.0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addSbtPlugin(&lt;span class=&quot;string&quot;&gt;&quot;com.eed3si9n&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;sbt-assembly&quot;&lt;/span&gt; % &lt;span class=&quot;string&quot;&gt;&quot;0.14.2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にbuild.sbtに必要なライブラリを追記しておきます。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name := &lt;span class=&quot;string&quot;&gt;&quot;akka-http-standalone&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version := &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scalaVersion := &lt;span class=&quot;string&quot;&gt;&quot;2.11.8&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scalacOptions := &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;-unchecked&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-deprecation&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-encoding&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;utf8&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Xlint&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assemblyOutputPath in assembly := file(&lt;span class=&quot;string&quot;&gt;&quot;./akka-http-standalone.jar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;libraryDependencies ++= &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; akkaV = &lt;span class=&quot;string&quot;&gt;&quot;2.4.2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-actor&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-stream&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-http-experimental&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-http-spray-json-experimental&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-http-xml-experimental&quot;&lt;/span&gt; % akkaV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; %% &lt;span class=&quot;string&quot;&gt;&quot;akka-http-testkit&quot;&lt;/span&gt; % akkaV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Revolver&lt;/span&gt;.settings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Scala&quot;&gt;&lt;a href=&quot;#Scala&quot; class=&quot;headerlink&quot; title=&quot;Scala&quot;&gt;&lt;/a&gt;Scala&lt;/h2&gt;&lt;p&gt;Routeを書く前にデータやリクエストを定義します、JSONを使いたいのでさらにJsonProtocolも定義します。&lt;br&gt;jsonFormatの後ろについている1や2はClassのパラメータ数を表しています。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; spray.json.&lt;span class=&quot;type&quot;&gt;DefaultJsonProtocol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyData&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ErrorResponse&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateUserRequest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UpdateUserRequest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JsonProtocol&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultJsonProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyData&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; userFormat = jsonFormat2(&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; errorResponse = jsonFormat1(&lt;span class=&quot;type&quot;&gt;ErrorResponse&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; createUserRequestFormat = jsonFormat1(&lt;span class=&quot;type&quot;&gt;CreateUserRequest&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; updateUserRequest = jsonFormat1(&lt;span class=&quot;type&quot;&gt;UpdateUserRequest&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;データの定義が完了したので実際にRouteを書いていきます、ほぼSprayの書き方と同じです。&lt;br&gt;本来であればRouteとServiceは分離してあった方が良い気がしますが今回は気にせず一体型にします。&lt;br&gt;JSONを使いたいのでSprayJsonSupportを継承しています、この辺まだSprayのままみたいですね。&lt;br&gt;先に定義したJsonProtocolをimportしないとcompileが通らないので注意してください。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.marshallers.sprayjson.&lt;span class=&quot;type&quot;&gt;SprayJsonSupport&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.model._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.server.&lt;span class=&quot;type&quot;&gt;Directives&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SprayJsonSupport&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyData&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;JsonProtocol&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; routes =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pathSingleSlash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// GET localhost:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      path(&lt;span class=&quot;string&quot;&gt;&quot;ping&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// GET localhost:8080/ping&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          complete(&lt;span class=&quot;string&quot;&gt;&quot;pong&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      pathPrefix(&lt;span class=&quot;string&quot;&gt;&quot;users&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pathEndOrSingleSlash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// GET localhost:8080/users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getUsers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            post &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// POST localhost:8080/users&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              entity(as[&lt;span class=&quot;type&quot;&gt;CreateUserRequest&lt;/span&gt;]) &amp;#123; request =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                createUser(request.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          path(&lt;span class=&quot;type&quot;&gt;IntNumber&lt;/span&gt;) &amp;#123; id =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;// GET localhost:8080/users.:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              getUser(id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              patch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// PATCH localhost:8080/users.:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                entity(as[&lt;span class=&quot;type&quot;&gt;UpdateUserRequest&lt;/span&gt;]) &amp;#123; request =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  updateUser(id, request.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              delete &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// DELETE localhost:8080/users.:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                deleteUser(id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;/span&gt;() = complete(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;HttpResponse&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      entity = &lt;span class=&quot;type&quot;&gt;HttpEntity&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ContentTypes&lt;/span&gt;.`text/html(&lt;span class=&quot;type&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;)`,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;h1&amp;gt;&lt;span class=&quot;type&quot;&gt;Welcome&lt;/span&gt; to &amp;lt;i&amp;gt;akka-http&amp;lt;/i&amp;gt;!&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/html&amp;gt;.toString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; userNotFound = &lt;span class=&quot;string&quot;&gt;&quot;user_not_found&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createUser&lt;/span&gt;&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.createUser(name) &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(err) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failWith(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(user) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUsers&lt;/span&gt;&lt;/span&gt;()(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.getUsers &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(err) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failWith(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(users) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.getUser(id) &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(err) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failWith(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;None&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(&lt;span class=&quot;type&quot;&gt;StatusCodes&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;NotFound&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;ErrorResponse&lt;/span&gt;(userNotFound))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(user)) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.updateUser(id, name) &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(err) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failWith(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;None&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(&lt;span class=&quot;type&quot;&gt;StatusCodes&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;NotFound&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;ErrorResponse&lt;/span&gt;(userNotFound))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(user)) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; db: &lt;span class=&quot;type&quot;&gt;DB&lt;/span&gt;) =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.deleteUser(id) &lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;(err) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failWith(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(()) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        complete(&lt;span class=&quot;type&quot;&gt;StatusCodes&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;OK&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;indexとpingは関係ないですがサンプルとして追加しました。&lt;br&gt;リクエストの処理が完了して手っ取り早くOKだけ返したい時は&lt;code&gt;StatusCodes.OK&lt;/code&gt;を使ってあげると簡単です。&lt;br&gt;全体的に特に難しいところもなく割と直感的に書けるところは良いですね。&lt;br&gt;他に便利なrouting DSLもたくさんあるので公式ドキュメントで適宜探してみると良いと思います。&lt;br&gt;次にDBのモックをこんな感じに作っておきます。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MyData&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createUser&lt;/span&gt;&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Throwable&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUsers&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Throwable&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Throwable&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Throwable&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;Either&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Throwable&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Unit&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MockDB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DB&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user_table = &lt;span class=&quot;type&quot;&gt;Seq&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; next_user_id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nextId&lt;/span&gt;&lt;/span&gt;() = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next_user_id += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next_user_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createUser&lt;/span&gt;&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; user = &lt;span class=&quot;type&quot;&gt;User&lt;/span&gt;(nextId(), name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_table = user_table :+ user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUsers&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(user_table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(user_table.find(_.id == id))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_table = user_table.map(u =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u.id == id) u.copy(name = name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; u&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getUser(id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteUser&lt;/span&gt;&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_table = user_table.filterNot(_.id == id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Right&lt;/span&gt;(())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Boot(Main)を書いていきます。この辺はSprayとちょっと異なる部分なので注意しながらやってみてください。&lt;br&gt;bindingが失敗したときのためにloggerを仕込んでいます。&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.actor.&lt;span class=&quot;type&quot;&gt;ActorSystem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.event.&lt;span class=&quot;type&quot;&gt;Logging&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.http.scaladsl.&lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; akka.stream.&lt;span class=&quot;type&quot;&gt;ActorMaterializer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Boot&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Route&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; system = &lt;span class=&quot;type&quot;&gt;ActorSystem&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;my-system&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; materializer = &lt;span class=&quot;type&quot;&gt;ActorMaterializer&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; db = &lt;span class=&quot;type&quot;&gt;MockDB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; ec = system.dispatcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; interface = &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; logger = &lt;span class=&quot;type&quot;&gt;Logging&lt;/span&gt;(system, getClass)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; binding = &lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;().bindAndHandle(routes, interface, port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  binding.onFailure &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; err: &lt;span class=&quot;type&quot;&gt;Exception&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      logger.error(err, &lt;span class=&quot;string&quot;&gt;s&quot;Failed to bind to &lt;span class=&quot;subst&quot;&gt;$interface&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;$port&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ここまできたらsbtでreStartしてみてください、API Serverが立ち上がると思います。&lt;br&gt;jarが欲しい場合は&lt;code&gt;sbt assembly&lt;/code&gt;でjarが生成されます、Stand-aloneなjarなので扱いやすいのが嬉しいです。&lt;/p&gt;
&lt;p&gt;Akka-HTTPは本当にSprayとほぼ同じ感じでかけるので使ったことある人はとっつきやすいと思いました。&lt;br&gt;現在はパフォーマンスチューニングを中心に開発しているようなのでどこまでSprayに近づけるのか楽しみですね。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Akka-HTTP&quot;&gt;&lt;a href=&quot;#Akka-HTTP&quot; class=&quot;headerlink&quot; title=&quot;Akka-HTTP&quot;&gt;&lt;/a&gt;Akka-HTTP&lt;/h1&gt;&lt;p&gt;Akka-HTTPはAkka-ActorとAkka-StreamsをベースとしたAk
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
  </entry>
  
  <entry>
    <title>CyberAgentさんのアドテクコンペで特別賞頂いた話</title>
    <link href="http://t-hiroyoshi.github.io/adtech-compe/"/>
    <id>http://t-hiroyoshi.github.io/adtech-compe/</id>
    <published>2016-03-01T16:22:05.000Z</published>
    <updated>2016-04-16T09:13:04.000Z</updated>
    
    <content type="html">&lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。&lt;/p&gt;
&lt;p&gt;今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというものでした。&lt;br&gt;DSPとは飛んでくる入札のリクエストに対しいくらでどんな広告を出したいかを返すものです、なので求められるものとしては高トラフィック(今回は2000QPS)をさばきつつ配信する広告を選び適切な価格で入札できるものといった感じです。さらにDSPには応答速度も問われ今回は100ms以内にレスポンスが返せないものは無効になるという設定でした。最終的な評価はCPC(クリックあたりのコスト)と予算の消化率で行われました。&lt;/p&gt;
&lt;p&gt;参加した理由ですがそろそろプログラミングやり始めて1年だしハッカソン的なのに出てみたいなって思っていた時にScalaMatsuri2016で見かけたCyberAgentさんのホームページ見てみてみたら学生向けのハッカソンの参加者を募集していて、何か面白そうだし応募してみたところ参加権を貰えたというのが理由です。&lt;/p&gt;
&lt;h1 id=&quot;作ったもの-作ろうとしたもの&quot;&gt;&lt;a href=&quot;#作ったもの-作ろうとしたもの&quot; class=&quot;headerlink&quot; title=&quot;作ったもの(作ろうとしたもの)&quot;&gt;&lt;/a&gt;作ったもの(作ろうとしたもの)&lt;/h1&gt;&lt;p&gt;僕のチームはエンジニアの自分とデータサイエンティストのSou Konishi, Kouichi Takayamaの3人チームでした。お互いの強みを生かしつつなるべく依存し合わないような設計をしようと以下のようなアーキテクチャにしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/adtechArchitecture.png&quot; alt=&quot;architecture&quot; title=&quot;architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;最初はAWSに依存しすぎるのが嫌だったのでKinesisではなくKafka Cluster使いたかったのですが、時間的に厳しいと判断して大人しくKinesis使いました。またConsumer側はマイクロサービス群なので拡張性があり、新たな機能を追加しやすいかなとか考えました。&lt;br&gt;イメージとしてはScalaをマイクロサービスプラットフォーム的な立ち位置で置いてスケールさせたかった感じです。&lt;br&gt;Producer~Consumer間で評価モデルの受け渡しをどうするのか迷っていましたが、Kinesisを使うことにしたのでAWSどっぷりで良いやってなってめっちゃ早と噂のMemcachedをElastiCache上で使うことにしました。Memcached使ったことなかったのでどういう感じに使えば良いか分からずConsumer側(Python)でセットすると余計なヘッダが付いてくるとかに悩まされScalaのパーサー書くのが辛かったです。&lt;br&gt;評価モデルの生成はデータサイエンティストの2人がKinesisの強みを生かしたオンライン学習ベースで随時最新のモデルをExportできるようにしてくれました。僕はデータサイエンティストの2人がJupyter使ってデータこねくり回しているのを見てはーすっげってなってました。&lt;br&gt;AkkaにはKamonが仕込んであって、Actorの最適化や監視に使う予定でしたが時間切れで仕込んだだけになってしまいました。&lt;/p&gt;
&lt;p&gt;最終的に骨組みを作りきりProducer側も上手く分散化ができたのですが、評価モデルの読み込みフォーマットと評価モデルの展開式をミスって計算が爆発してメッセージ消化しきれなくてActor死にまくるみたいになってまともに動きませんでした、Kamon生かせなかった…&lt;br&gt;完全にエンジニアリソースが足りておらず作り込み不足でした、ごめんなさい。&lt;/p&gt;
&lt;p&gt;開発後にチームでプレゼンをする機会があったのですが、徹夜開発に加え本番でまともに動かなかった絶望感から頭おかしい感じのプレゼンになっていたと思います(笑)。&lt;br&gt;ですが、嬉しいことに技術選定や設計、オンライン学習などを評価して頂きなんと&lt;strong&gt;特別賞&lt;/strong&gt;を頂くことができました。&lt;/p&gt;
&lt;h1 id=&quot;感想と反省&quot;&gt;&lt;a href=&quot;#感想と反省&quot; class=&quot;headerlink&quot; title=&quot;感想と反省&quot;&gt;&lt;/a&gt;感想と反省&lt;/h1&gt;&lt;p&gt;今回はCyberAgentさん主催だったのでレッドブルを出してくれたりお菓子食べ放題だったりピザが食べられたり美味しいコーヒーを準備してくれたり環境としては至れり尽くせりで開発に集中することができました、感謝です。&lt;/p&gt;
&lt;p&gt;チームメイトとの絆も(徹夜の)開発を通して生まれてとても濃いハッカソンになりました。&lt;br&gt;今回は開発時間的に忙しすぎてメンターの方々とあまり交流できなかったので少し残念でしたが、Kinesisの情報を頂いたりできたので良かったです。&lt;br&gt;KinesisやMemcachedといった技術は使ったことがなかったものなのでこの機会に使えることができて良かったですが、初ハッカソンということで張り切りすぎて技術選定を大きくしすぎた感があってエンジニアリソースが足りず最後まで作り込めませんでした。今回参加してみて実際のリソース感を体感できたので次回に生かしたいと思います。ハッカソンに限ってはベンダロックインを許容してどっぷり浸かった方が他に集中できて楽とか色々なことを学びました。&lt;/p&gt;
&lt;p&gt;まとめると初ハッカソンは本番で動かないという絶望的な結果に終わりましたが、特別賞を貰えたので救われました。ハッカソン的な短期集中開発は自分の性格的にかなり楽しめたのでこれからもハッカソンに積極的に参加していきたいです。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。&lt;/p&gt;
&lt;p&gt;今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというもの
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="adtech" scheme="http://t-hiroyoshi.github.io/tags/adtech/"/>
    
      <category term="aws" scheme="http://t-hiroyoshi.github.io/tags/aws/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="hackathon" scheme="http://t-hiroyoshi.github.io/tags/hackathon/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>ReactでDrag&amp;Drop</title>
    <link href="http://t-hiroyoshi.github.io/react-drag-drop/"/>
    <id>http://t-hiroyoshi.github.io/react-drag-drop/</id>
    <published>2015-12-14T13:00:00.000Z</published>
    <updated>2016-03-19T10:25:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ReactDnDについて&quot;&gt;&lt;a href=&quot;#ReactDnDについて&quot; class=&quot;headerlink&quot; title=&quot;ReactDnDについて&quot;&gt;&lt;/a&gt;ReactDnDについて&lt;/h1&gt;&lt;p&gt;Reactでdrag&amp;amp;dropコンポーネントを実装するのにおそらく一番有名(Redux作った人が作った)かつドキュメントが豊富なパッケージです。&lt;a href=&quot;http://gaearon.github.io/react-dnd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ドキュメント&lt;/a&gt;の情報量が結構多く自由度が高くて混乱しやすいので軽く使ってみたい人向けに核となるところだけ解説します。Danさん本当好き。&lt;/p&gt;
&lt;h1 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;p&gt;各コンポーネントをdrggable&amp;amp;droppable化するためのAPIがES7のdecoratorとして提供されています。&lt;br&gt;babel6使っている人はdecoratorがまだ公式では対応していないみたいなので注意してください(babel5なら大丈夫です)。公式じゃなければbabel6用のプラグイン作っている人がいたと思うので探してみてください。&lt;/p&gt;
&lt;h2 id=&quot;DragSource&quot;&gt;&lt;a href=&quot;#DragSource&quot; class=&quot;headerlink&quot; title=&quot;DragSource&quot;&gt;&lt;/a&gt;DragSource&lt;/h2&gt;&lt;p&gt;ドラッグされるコンポーネントについての設定を行える。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragSouce(type, spec, collect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DragComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: dorpされる側はここで設定した&lt;code&gt;type&lt;/code&gt;を見てdropを受け入れるか否かを決める、SymbolかString。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;: drag開始時の処理、drag終了時(dropされた時)の処理とかを書いたObject。例が後半にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collect&lt;/code&gt;: &lt;code&gt;DragComponent&lt;/code&gt;内で使う関数を取り出す関数でobjectを返す必要があります。connectとmonitorが引数として渡されます。ざっくり言うとconnectはDOMについて、monitorはdrag&amp;amp;dropの状態についてのObjectです、結構色々取れるので公式ドキュメント見てみてください。&lt;/p&gt;
&lt;h2 id=&quot;DropTarget&quot;&gt;&lt;a href=&quot;#DropTarget&quot; class=&quot;headerlink&quot; title=&quot;DropTarget&quot;&gt;&lt;/a&gt;DropTarget&lt;/h2&gt;&lt;p&gt;ドロップされるコンポーネントについての設定を行える。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DropTarget(types, spec, collect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DropComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;types&lt;/code&gt;: dropを受け入れる&lt;code&gt;type&lt;/code&gt;を設定する、SymbolかStringかArray。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;: dropを受け入れた時の処理やhoverされている時の処理を書いたObject。例が後半にあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collect&lt;/code&gt;: DragSourceの&lt;code&gt;collect&lt;/code&gt;と同じ&lt;/p&gt;
&lt;h2 id=&quot;DragDropContext&quot;&gt;&lt;a href=&quot;#DragDropContext&quot; class=&quot;headerlink&quot; title=&quot;DragDropContext&quot;&gt;&lt;/a&gt;DragDropContext&lt;/h2&gt;&lt;p&gt;上記のコンポーネント達をこいつでラップすることで初めてdrag&amp;amp;dropができるようになる。Backendが必要。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTML5Backend &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd-html5-backend&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragDropContext &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragDropContext(HTML5Backend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DnDComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// DragComponent &amp;amp; DropComponent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例では&lt;code&gt;HTML5Backend&lt;/code&gt;を使っているのでタッチには対応していません。タッチ対応のBackendもあるのでタッチ対応させたい人は探してみてください。&lt;/p&gt;
&lt;h1 id=&quot;実装例&quot;&gt;&lt;a href=&quot;#実装例&quot; class=&quot;headerlink&quot; title=&quot;実装例&quot;&gt;&lt;/a&gt;実装例&lt;/h1&gt;&lt;p&gt;drag&amp;amp;dropするとメッセージを表示するコンポーネントを作ってみます。&lt;/p&gt;
&lt;h2 id=&quot;DnDItem-Componentを作る&quot;&gt;&lt;a href=&quot;#DnDItem-Componentを作る&quot; class=&quot;headerlink&quot; title=&quot;DnDItem Componentを作る&quot;&gt;&lt;/a&gt;DnDItem Componentを作る&lt;/h2&gt;&lt;p&gt;実際にdrag&amp;amp;dropされるコンポーネントを作ります。&lt;br&gt;DragSourceとDropTargetは同時に使うことでdragもdropもできるコンポーネントを作ることが可能です。&lt;/p&gt;
&lt;p&gt;drag&amp;amp;dropされたときのactionは親からpropsとして受け取ります。&lt;br&gt;またtypeも同様に親からpropsとして受け取っています。&lt;/p&gt;
&lt;p&gt;DragSourceとDropTarget間は基本的にmonitorを通して値のやり取りをします。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragSource, DropTarget &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dragSpec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dragが始まったときの処理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  beginDrag(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dragされ始めたら自分のidを返す&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; id &amp;#125; = props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; id &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dragが終わったときの処置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  endDrag(props, monitor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// beginDragで返されたidを取ってくる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = monitor.getItem();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropSpecのdropで返されたidを取ってくる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; target = monitor.getDropResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropActionを発火させる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (target) props.dropAction(source.id, target.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dropSpec = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// dropされたときの処理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  drop(props, monitor, component) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// dropされたら自分のidを返す&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; id &amp;#125; = props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; id &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// DropTargetとDragSourceを使っているのでdragもdropもできる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DropTarget(props =&amp;gt; props.type, dropSpec, connect =&amp;gt; (&amp;#123; connectDropTarget: connect.dropTarget() &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragSource(props =&amp;gt; props.type, dragSpec, connect =&amp;gt; (&amp;#123; connectDragSource: connect.dragSource() &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DnDItem&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connectDragSource: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    connectDropTarget: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dropAction: React.PropTypes.func.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id: React.PropTypes.string.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: React.PropTypes.string.isRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      connectDragSource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      connectDropTarget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; connectDragSource(connectDropTarget(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h3&amp;gt;&amp;#123;name&amp;#125;&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DnDField-Componentを作る&quot;&gt;&lt;a href=&quot;#DnDField-Componentを作る&quot; class=&quot;headerlink&quot; title=&quot;DnDField Componentを作る&quot;&gt;&lt;/a&gt;DnDField Componentを作る&lt;/h2&gt;&lt;p&gt;DnDItem Componentをラップする親玉を作ります、stateはこのコンポーネントで管理して更新用のactionをDnDItemに渡します。&lt;/p&gt;
&lt;p&gt;今回はidをkeyとして渡しています、keyはReactDnD内部でのDOMの参照に使われるのでValueObjectである必要があります。あまりにも適当なものを渡すと壊れるので気をつけてください(React始めたばっかりの時Math.random()とか渡してて死にそうになった)。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTML5Backend &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd-html5-backend&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; DragDropContext &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react-dnd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; DnDItem &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./DnDItem&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// DragDropContextでラップする&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@DragDropContext(HTML5Backend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DnDField&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&quot;bad&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;id: &lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;, name: &lt;span class=&quot;string&quot;&gt;&quot;qux&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      message: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dropAction(sourceId, targetId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; list &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// message更新 Redux使うならここでaction, それぞれのidが渡ってくる&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sourceName = list.find(item =&amp;gt; item.id === sourceId).name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; targetName = list.find(item =&amp;gt; item.id === targetId).name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;message: &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;sourceName&amp;#125;&lt;/span&gt; dropped on &lt;span class=&quot;subst&quot;&gt;$&amp;#123;targetName&amp;#125;&lt;/span&gt;`&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; list, message &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; itemType = &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;&amp;#123;message&amp;#125;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#123;list.map(item =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;DnDItem id=&amp;#123;item.id&amp;#125; name=&amp;#123;item.name&amp;#125; type=&amp;#123;itemType&amp;#125; dropAction=&amp;#123;::this.dropAction&amp;#125; key=&amp;#123;item.id&amp;#125;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/ol&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;まとめ&quot;&gt;&lt;a href=&quot;#まとめ&quot; class=&quot;headerlink&quot; title=&quot;まとめ&quot;&gt;&lt;/a&gt;まとめ&lt;/h2&gt;&lt;p&gt;これでdragされたComponentのidとdropされたComponentのidが取得できる実装が出来ました。idが取得できればあとはどうにでもできるので実際の開発に生かすことができればと思います。&lt;/p&gt;
&lt;p&gt;今回紹介したのはReactDnDのほんの一部で他にもたくさんのオプションがあるので是非ドキュメントを読んでカスタムしてみてください。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ReactDnDについて&quot;&gt;&lt;a href=&quot;#ReactDnDについて&quot; class=&quot;headerlink&quot; title=&quot;ReactDnDについて&quot;&gt;&lt;/a&gt;ReactDnDについて&lt;/h1&gt;&lt;p&gt;Reactでdrag&amp;amp;dropコンポーネントを実装す
    
    </summary>
    
    
      <category term="reactjs" scheme="http://t-hiroyoshi.github.io/tags/reactjs/"/>
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="client" scheme="http://t-hiroyoshi.github.io/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>Hexoを使って無料でブログを公開する</title>
    <link href="http://t-hiroyoshi.github.io/start-hexo/"/>
    <id>http://t-hiroyoshi.github.io/start-hexo/</id>
    <published>2015-11-19T13:14:39.000Z</published>
    <updated>2016-03-19T10:25:59.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;なぜHexoなのか&quot;&gt;&lt;a href=&quot;#なぜHexoなのか&quot; class=&quot;headerlink&quot; title=&quot;なぜHexoなのか&quot;&gt;&lt;/a&gt;なぜHexoなのか&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.jsでやれる&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に静的サイトを構築できる&lt;/li&gt;
&lt;li&gt;テーマが多くて完成度が高い、さらにカスタムできる&lt;/li&gt;
&lt;li&gt;Markdownで記事が書けるので嬉しいよ!&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Hexoを使ってブログを公開するまでの手順&quot;&gt;&lt;a href=&quot;#Hexoを使ってブログを公開するまでの手順&quot; class=&quot;headerlink&quot; title=&quot;Hexoを使ってブログを公開するまでの手順&quot;&gt;&lt;/a&gt;Hexoを使ってブログを公開するまでの手順&lt;/h1&gt;&lt;h2 id=&quot;Hexoをインストールする&quot;&gt;&lt;a href=&quot;#Hexoをインストールする&quot; class=&quot;headerlink&quot; title=&quot;Hexoをインストールする&quot;&gt;&lt;/a&gt;Hexoをインストールする&lt;/h2&gt;&lt;p&gt;まずはnpmでHexoをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にブログの雛形を作成して依存パッケージをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init &amp;lt;your-blog-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;your-blog-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ここまでくれば実際にページを見ることが可能です、&lt;code&gt;hexo server&lt;/code&gt;と打った後&lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;localhost:4000&lt;/a&gt;にアクセスしてみてください。デフォルトのテーマなので好みはあると思いますが、テーマは後で変えられるので安心してください!&lt;/p&gt;
&lt;h2 id=&quot;Github-Pagesでブログを公開する&quot;&gt;&lt;a href=&quot;#Github-Pagesでブログを公開する&quot; class=&quot;headerlink&quot; title=&quot;Github Pagesでブログを公開する&quot;&gt;&lt;/a&gt;Github Pagesでブログを公開する&lt;/h2&gt;&lt;p&gt;ブログをGitHub Pagesを利用して公開してみようと思います、まずは&lt;code&gt;&amp;lt;user-name&amp;gt;.github.io&lt;/code&gt;という名前のレポジトリを作成します。&lt;br&gt;デプロイはGitで行いたいと思うのでプラグインをインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次にレポジトリの登録を行います、先ほど作成した雛形の中にある&lt;code&gt;_config.yml&lt;/code&gt;を下記のように編集してください。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;deploy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  repo:&lt;/span&gt; git@github.com:&amp;lt;user-name&amp;gt;/&amp;lt;user-name&amp;gt;.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  branch:&lt;/span&gt; master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これでブログを公開する準備は完了です、デプロイしてみましょう。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;無事にデプロイできたら&lt;code&gt;http://&amp;lt;user-name&amp;gt;.github.io&lt;/code&gt;にアクセスしてみてください、ブログが表示されれば成功です!&lt;/p&gt;
&lt;h2 id=&quot;記事の追加をする&quot;&gt;&lt;a href=&quot;#記事の追加をする&quot; class=&quot;headerlink&quot; title=&quot;記事の追加をする&quot;&gt;&lt;/a&gt;記事の追加をする&lt;/h2&gt;&lt;p&gt;記事の追加は下記のコマンドを打つことで可能です、タイトルがそのままファイル名になるので日本語などは避けたほうが良いです。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;page-title&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;そうすると&lt;code&gt;source/_posts&lt;/code&gt;の中に&lt;code&gt;page-title.md&lt;/code&gt;ができていると思います、Markdownでゴリゴリ中身を書きましょう。&lt;code&gt;hexo server&lt;/code&gt;でサーバーを動かしながら書くとブラウザをリロードするたびに更新されていくのでプレビュー代わりに使えます。&lt;br&gt;記事を書き終えたら公開して、Github Pagesにアクセスして実際に見てみてください。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;テーマをインストールする&quot;&gt;&lt;a href=&quot;#テーマをインストールする&quot; class=&quot;headerlink&quot; title=&quot;テーマをインストールする&quot;&gt;&lt;/a&gt;テーマをインストールする&lt;/h2&gt;&lt;p&gt;まずはGithubなどで導入したいテーマを見つけてきてください、多分&lt;code&gt;hexo theme&lt;/code&gt;とかで検索するとたくさん出てくると思います。細かい部分は自分で変更できるのでだいたい雰囲気で選んで良いと思います。良い感じのテーマが見つかったらクローンしてきます。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; themes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git@github.com:&amp;lt;theme-auther&amp;gt;/&amp;lt;theme-name&amp;gt;.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次に先ほどの&lt;code&gt;_config.yml&lt;/code&gt;を書き換えます。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Extensions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;theme:&lt;/span&gt; &amp;lt;theme-name&lt;span class=&quot;string&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これでテーマが適応されました、&lt;code&gt;hexo server&lt;/code&gt;して実際に見てみてください。&lt;br&gt;テーマの細かい設定はそれぞれのテーマの&lt;code&gt;themes/&amp;lt;theme-name&amp;gt;/_config.yml&lt;/code&gt;を変更することで可能です。&lt;br&gt;ある程度気にいる形になったらデプロイして公開しましょう!&lt;/p&gt;
&lt;p&gt;テーマやスタイルシートを変更した後にデプロイしてもデザインが変更されないことがあると思いますが、これは下のコマンドで解決することができます。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;この後に再びデプロイしてみてください、テーマやデザインシートの変更が反映されていると思います!&lt;/p&gt;
&lt;h1 id=&quot;まとめ&quot;&gt;&lt;a href=&quot;#まとめ&quot; class=&quot;headerlink&quot; title=&quot;まとめ&quot;&gt;&lt;/a&gt;まとめ&lt;/h1&gt;&lt;p&gt;Hexoを使ってブログを公開する方法を書きました。&lt;br&gt;Hexoは静的サイトの構築が本当に簡単にできる素晴らしいツールだと思います、テーマも非常に完成度が高いものが多いので一瞬にしてそれなりにちゃんとしたブログが作れてしまうのは本当に驚きです。&lt;br&gt;ただHexoを使っていてひとつ辛いのは中国圏のユーザーが多いので英語ではなく中国語のドキュメント、ディスカッションが多いという点です、英語ならそれなりに読めますが中国語は辛い…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;なぜHexoなのか&quot;&gt;&lt;a href=&quot;#なぜHexoなのか&quot; class=&quot;headerlink&quot; title=&quot;なぜHexoなのか&quot;&gt;&lt;/a&gt;なぜHexoなのか&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.jsでやれる&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に静的サイトを構築
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="hexo" scheme="http://t-hiroyoshi.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://t-hiroyoshi.github.io/tags/github/"/>
    
  </entry>
  
</feed>
