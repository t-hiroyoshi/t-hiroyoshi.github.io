<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>t-hiroyoshi-blog</title>
  <subtitle>A tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://t-hiroyoshi.github.io/"/>
  <updated>2016-11-18T04:20:52.000Z</updated>
  <id>http://t-hiroyoshi.github.io/</id>
  
  <author>
    <name>Hiroyoshi Takahashi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yarn global addしたパッケージのパスを通す</title>
    <link href="http://t-hiroyoshi.github.io/yarn-global-link/"/>
    <id>http://t-hiroyoshi.github.io/yarn-global-link/</id>
    <published>2016-11-18T04:17:12.000Z</published>
    <updated>2016-11-18T04:20:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>yarn global add</code>しても自動でパス通してくれないっぽい<a href="https://github.com/yarnpkg/yarn/issues/1585" target="_blank" rel="external">バグ</a>があるようで</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ yarn global add create-react-app</div><div class="line">$ create-react-app</div><div class="line">zsh: <span class="built_in">command</span> not found: create-react-app</div></pre></td></tr></table></figure>
<p>ってなったので~/.zshrcに以下を追加しました。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export PATH=&quot;$PATH:`yarn global bin`&quot;</div></pre></td></tr></table></figure>
<p>もう一回やってみると行けます。</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">create-react-app</span></div><div class="line"><span class="string">Usage:</span> <span class="built_in">create-react-app</span> &lt;<span class="string">project-directory&gt;</span> [<span class="built_in">--verbose]</span></div></pre></td></tr></table></figure>
<p><code>yarn global</code>には結構バグがあるっぽいので早く安定してほしいですね。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;yarn global add&lt;/code&gt;しても自動でパス通してくれないっぽい&lt;a href=&quot;https://github.com/yarnpkg/yarn/issues/1585&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;バグ&lt;/a&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://t-hiroyoshi.github.io/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>webpackで使えるSourceMap一覧まとめ</title>
    <link href="http://t-hiroyoshi.github.io/webpack-devtool/"/>
    <id>http://t-hiroyoshi.github.io/webpack-devtool/</id>
    <published>2016-11-03T15:41:46.000Z</published>
    <updated>2016-11-18T04:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><code>eval</code>: それぞれのモジュールはevalとして実行され<code>//@ sourceURL</code>が付けられます</li>
<li><code>source-map</code>: SourceMapを完全に別ファイルとして生成します。<code>output.sourceMapFilename</code>で設定が可能です</li>
<li><code>hidden-source-map</code>: <code>source-map</code>と同様SourceMapを別ファイルとして生成しますがバンドルに参照コメントを含みません</li>
<li><code>inline-source-map</code>: SourceMapはDataUrlとしてバンドルされます</li>
<li><code>eval-source-map</code>: それぞれのモジュールはevalとして実行され、SourceMapはDataUrlとしてevalに追加されます</li>
<li><code>cheap-source-map</code>: SourceMapは列を無視して生成されます。loaderで読み込まれたSourceMapは無視されます。</li>
<li><code>cheap-module-source-map</code>: SourceMapは列を無視して生成されます。ロードされたソースマップを1行に1つのマッピングに単純化されます。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">devtool</th>
<th style="text-align:center">build</th>
<th style="text-align:center">rebuild</th>
<th style="text-align:center">production</th>
<th style="text-align:center">quality</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">eval</td>
<td style="text-align:center">+++</td>
<td style="text-align:center">+++</td>
<td style="text-align:center">no</td>
<td style="text-align:center">generated code</td>
</tr>
<tr>
<td style="text-align:center">cheap-eval-source-map</td>
<td style="text-align:center">+</td>
<td style="text-align:center">++</td>
<td style="text-align:center">no</td>
<td style="text-align:center">transformed code (lines only)</td>
</tr>
<tr>
<td style="text-align:center">cheap-source-map</td>
<td style="text-align:center">+</td>
<td style="text-align:center">o</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">transformed code (lines only)</td>
</tr>
<tr>
<td style="text-align:center">cheap-module-eval-source-map</td>
<td style="text-align:center">o</td>
<td style="text-align:center">++</td>
<td style="text-align:center">no</td>
<td style="text-align:center">original source (lines only)</td>
</tr>
<tr>
<td style="text-align:center">cheap-module-source-map</td>
<td style="text-align:center">o</td>
<td style="text-align:center">-</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">original source (lines only)</td>
</tr>
<tr>
<td style="text-align:center">eval-source-map</td>
<td style="text-align:center">–</td>
<td style="text-align:center">+</td>
<td style="text-align:center">no</td>
<td style="text-align:center">original source</td>
</tr>
<tr>
<td style="text-align:center">source-map</td>
<td style="text-align:center">–</td>
<td style="text-align:center">–</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">original source</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt;: それぞれのモジュールはevalとして実行され&lt;code&gt;//@ sourceURL&lt;/code&gt;が付けられます&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source-map&lt;/code&gt;: SourceMapを完全に別ファイルとして生
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="webpack" scheme="http://t-hiroyoshi.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>GoのJSON API ServerでゆるふわJSON responseを返す方法</title>
    <link href="http://t-hiroyoshi.github.io/go-yuru-json/"/>
    <id>http://t-hiroyoshi.github.io/go-yuru-json/</id>
    <published>2016-10-25T10:24:09.000Z</published>
    <updated>2016-11-03T15:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近GoをAPI Gateway(Aggregator)としている環境で開発を行なっているのですが、呼び出し先のServiceの実装が終わっていなくてもClientでとりあえずJSONのresponseが欲しいという状況がありました。</p>
<p>JSONのUnmarshalについては<a href="https://www.kaoriya.net/blog/2016/06/25/" target="_blank" rel="external">golangはゆるふわにJSONを扱えまぁす!</a>という記事が有ったのですが、ゆるふわMarshalについては情報がありませんでした。</p>
<p>ですが考えてみればjson.Marshal()すると<code>[]byte</code>型になるのでそれを初めから作ってあげればよかったです。<br>まあもちろんこれではGoの良いところを捨てているようなものですが、開発中のとりあえずのレスポンスには手軽で良いと思いました。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">jsonResponse</span><span class="params">(rw http.ResponseWriter, req *http.Request)</span></span> &#123;</div><div class="line">    response := []<span class="keyword">byte</span>(<span class="string">`</span></div><div class="line">        &#123;</div><div class="line">          "status": "success",</div><div class="line">          "user":</div><div class="line">            &#123;</div><div class="line">              "id": "2d7b8fe1-1e63-4c3b-83b9-46274554e822",</div><div class="line">              "name": "t-hiroyoshi",</div><div class="line">              "birthday": "1993-09-06T11:22:33.496Z"</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    `)</div><div class="line"></div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        rw.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">        fmt.Fprint(rw, <span class="keyword">string</span>(response))</div><div class="line">    &#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    http.HandleFunc(<span class="string">"/json"</span>, jsonResponse)</div><div class="line">    http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近GoをAPI Gateway(Aggregator)としている環境で開発を行なっているのですが、呼び出し先のServiceの実装が終わっていなくてもClientでとりあえずJSONのresponseが欲しいという状況がありました。&lt;/p&gt;
&lt;p&gt;JSONのUnmarsh
    
    </summary>
    
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="go" scheme="http://t-hiroyoshi.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Yarnでreact-tutorialを動かす</title>
    <link href="http://t-hiroyoshi.github.io/try-yarn/"/>
    <id>http://t-hiroyoshi.github.io/try-yarn/</id>
    <published>2016-10-13T02:28:33.000Z</published>
    <updated>2016-10-13T07:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yarnとは"><a href="#Yarnとは" class="headerlink" title="Yarnとは"></a>Yarnとは</h1><p><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="external">Yarn</a>とはつい先日公開された、Facebook, Exponent, Google, Tildeによって開発されたオープンソースの新しいJavaScriptパッケージマネージャです。</p>
<p>現在JavaScriptのパッケージマネージャとしてすでにnpmが存在していますが、Facebookほどの規模感になるとパフォーマンスやセキュリティに影響が出てきたので一から新しくYarnを<a href="https://code.facebook.com/posts/1840075619545360" target="_blank" rel="external">作ったよう</a>です。<br>新しいといってもnpmと互換性を持つpackage.jsonでパッケージ管理を行い、npm registry上のパッケージをインストールするので使う側としては早くて固いnpmぐらいに思った方が良いかもしれないです。</p>
<p>中の人をみてみると<a href="https://github.com/babel/babel" target="_blank" rel="external">Babel</a>や<a href="https://github.com/lerna/lerna" target="_blank" rel="external">Lerna</a>を作ったSebastianさんがコアっぽくてこの人やっぱりすごいなって思いました。</p>
<p>特徴をざっくりまとめるとこんな感じです</p>
<ul>
<li>Ultra Fast: ダウンロードされたパッケージは全てローカルにキャッシュされて並列インストールされる</li>
<li>Mega Secure: インストールされたパッケージは実行される前にチェックサムされる</li>
<li>Super Reliable: lockfileを使っていて他のシステムでも全く同じものがインストールされることが保証されている</li>
<li>More emojis: 🐈</li>
</ul>
<h1 id="試す"><a href="#試す" class="headerlink" title="試す"></a>試す</h1><p>本当は<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a>を動かしたかったのですがまだ<a href="https://github.com/facebookincubator/create-react-app/issues/896" target="_blank" rel="external">対応していなかった</a>ので<a href="https://github.com/reactjs/react-tutorial/" target="_blank" rel="external">react-tutorial</a>でやります。</p>
<p>何はともあれYarn本体をインストールします。<br>macOSやunixは以下のスクリプトでインストールできます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -o- -L https://yarnpkg.com/install.sh | bash</div></pre></td></tr></table></figure>
<p>もしくはnpmを置き換えるものをnpmで入れるのは気持ち悪いですがnpmでも簡単に入れることができます。<br><strong><code>yarn</code>は現在<a href="https://github.com/yarnpkg/yarn/issues/735" target="_blank" rel="external">バグがある</a>ので今の所は<code>yarnpkg</code>の方を推奨します</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install --global yarnpkg</div><div class="line"># or</div><div class="line">npm install --global yarn</div></pre></td></tr></table></figure>
<p>react-tutorialをcloneしてきてdependenciesをインストールします。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone git@github.com:reactjs/react-tutorial.git</div><div class="line">cd react-tutorial</div><div class="line"></div><div class="line">yarn install</div><div class="line"># or just &quot;yarn&quot;</div></pre></td></tr></table></figure>
<p>この時点で感じたかもしれませんがめっちゃインストール早いです。<br>軽く計測してみたところnpmだと2.07s、Yarnだと0.66sと3倍ぐらいYarnの方が早かったです。</p>
<p>さらにyarn.lockが生成されてバージョンが固定されていることが確認できます。</p>
<p>npm-scriptsと同じ機能がYarnにもあって<code>yarn run &lt;script&gt;</code>で実行できます。<br>これを使ってreact-tutorialを起動してみます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yarn run start</div><div class="line"># or</div><div class="line">yarn start</div></pre></td></tr></table></figure>
<p>ブラウザで<code>http://localhost:3000/</code>を開くときちんと動いていることが確認できると思います。</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>npmよりかなり高速化していることが分かりました、CLIの<a href="https://yarnpkg.com/en/docs/cli/" target="_blank" rel="external">コマンド</a>もnpmよりシンプルで好きなのでこれから積極的に使いたいです。JavaScript界のOSS開発速度はものすごいのでオープンになったこれから加速度的に色々改善されていくと思います。<br>現在npm上の<code>yarn</code>が現在バグっていることなどからまだ若干時期尚早かなという気がしますがいざという時はnpm使えば良いのでありかなというのが個人的な感想です。<br>Babel6の時みたいな大きな変更が入って苦しむことが起きないように願います。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Yarnとは&quot;&gt;&lt;a href=&quot;#Yarnとは&quot; class=&quot;headerlink&quot; title=&quot;Yarnとは&quot;&gt;&lt;/a&gt;Yarnとは&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/yarnpkg/yarn&quot; target=&quot;_bla
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://t-hiroyoshi.github.io/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>Akka HTTP is faster than Spray now</title>
    <link href="http://t-hiroyoshi.github.io/akka-http-is-faster-than-spray/"/>
    <id>http://t-hiroyoshi.github.io/akka-http-is-faster-than-spray/</id>
    <published>2016-08-04T07:15:07.000Z</published>
    <updated>2016-08-04T10:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、t-hiroyoshiです。</p>
<p>先日<a href="http://akka.io/news/2016/08/02/akka-2.4.9-RC1-released.html" target="_blank" rel="external">Akka 2.4.9-RC1</a>がリリースされました。<br>今回のリリースはAkka HTTPのパフォーマンス改善に焦点を絞ったアップデートでAkka HTTPのパフォーマンスがSprayと同等かそれ以上になったと書かれています。</p>
<h2 id="Akka-HTTP-revenge"><a href="#Akka-HTTP-revenge" class="headerlink" title="Akka HTTP revenge"></a>Akka HTTP revenge</h2><p><a href="/spray-akka-benchmark">以前</a>Akka HTTPとSpray-canのベンチマークを取った時はSprayに軍配が上がりましたが、今回のアップデートはどれほどのものなのか軽く調べるために再度Akka HTTPのみベンチマークを取りました(Sprayはもう更新されていません)。</p>
<p>コードやベンチマーク環境は前回と同じ状態でAkkaのバージョンのみ上げています。</p>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;</div><div class="line"></div><div class="line">Server Software:        akka-http/2.4.9-RC1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      10</div><div class="line">Time taken for tests:   0.336 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Keep-Alive requests:    10000</div><div class="line">Total transferred:      1820000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    29805.82 [#/sec] (mean)</div><div class="line">Time per request:       0.336 [ms] (mean)</div><div class="line">Time per request:       0.034 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          5297.52 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.0      0       0</div><div class="line">Processing:     0    0   0.4      0      17</div><div class="line">Waiting:        0    0   0.4      0      17</div><div class="line">Total:          0    0   0.4      0      17</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%      0</div><div class="line">  66%      0</div><div class="line">  75%      0</div><div class="line">  80%      0</div><div class="line">  90%      0</div><div class="line">  95%      1</div><div class="line">  98%      1</div><div class="line">  99%      2</div><div class="line"> 100%     17 (longest request)</div></pre></td></tr></table></figure>
<p>前回のベンチマークではSpray-canが23230.85 req/secでSpray-canの方がパフォーマンスが良かったですが、今回Akka HTTPは29805.82 req/secというSpray-canを越す数値を叩き出しました。<br>前回のベンチマークから4ヶ月ぐらいしか経っていないのにこんなに速くなるとは驚きです。</p>
<h2 id="Next-steps-for-Akka-HTTP"><a href="#Next-steps-for-Akka-HTTP" class="headerlink" title="Next steps for Akka HTTP"></a>Next steps for Akka HTTP</h2><p>今後のAkka HTTPのことについては、Sprayの終末とAkka HTTPへの置き換えを推奨していて近いうちにexperimentalが外れるようです。<br>HTTP/2についても今後やっていくようで<a href="https://github.com/akka/akka-meta" target="_blank" rel="external">ここ</a>から追えます。<br>期待しながら待ちたいと思います。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;http://akka.io/news/2016/08/02/akka-2.4.9-RC1-released.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akka 2
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
      <category term="benchmark" scheme="http://t-hiroyoshi.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>Scala NativeのデモをDocker上で動かす</title>
    <link href="http://t-hiroyoshi.github.io/scala-native-demo-docker/"/>
    <id>http://t-hiroyoshi.github.io/scala-native-demo-docker/</id>
    <published>2016-07-14T04:23:02.000Z</published>
    <updated>2016-07-26T06:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、t-hiroyoshiです。<br>最近は<a href="http://event.scaladays.org/scaladays-nyc-2016" target="_blank" rel="external">Scala Days 2016 NYC</a>で発表された<a href="https://github.com/scala-native/scala-native" target="_blank" rel="external">Scala Native</a>にコントリビュートしています。Scalaのような強力な言語がbare metalで動くのは素晴らしい事だと思っているので早く実用レベルで動くようにこれからも積極的に貢献していきたいです。</p>
<p>そんな訳で今回は布教を兼ねてScala NativeのデモをDocker上で簡単に動かす方法を紹介したいと思います。</p>
<h1 id="Scala-Native"><a href="#Scala-Native" class="headerlink" title="Scala Native"></a>Scala Native</h1><p>Scala Nativeとは何かと言うと、ScalaのコードをLLVMのIR経由でコンパイルしてNative実行可能にするAOTコンパイラ(AheadOfTimeCompiler)実装です。<br>一部低級な処理向けにScalaを拡張しているのである意味別言語と言っても過言ではないかもしれません。<br>これらの拡張によってScalaをSystem level languageに落とし込めるのでその気になればScalaで何でも作れるわけで、とても未来が楽しみです。</p>
<p>ただREADMEに<code>pre-release stage</code>とあるようにまだ完全にScala-likeには動きません、ですが活発にIssueやPull reqが飛んでいるので近いうちにまともに動くようになると思っています。(まだ完成していない今ならコントリビュートのチャンス?)</p>
<p>現在はLLVM(Clang)とBOEHM GCをローカル環境に依存しているのでデモを動かすまでにそれらのパスが通らなかったり、依存解決で結構躓く人が多いみたいです。<br>そこでScala Nativeのレポジトリ内にあるDockerfileを使って作ったコンテナ内でデモを動かしてみたいと思います。管理用のスクリプトもきちんとあるので比較的簡単に動かす事が可能です。</p>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="docker-machineを立てる-Option"><a href="#docker-machineを立てる-Option" class="headerlink" title="docker-machineを立てる(Option)"></a>docker-machineを立てる(Option)</h2><p>なるべくローカルの環境を汚染したくないのでdocker-machineでDockerホストを立てます。<br>driverは<code>virtualbox</code>を使っていますが<code>vmwarefusion</code>で立てた方がもしかしたら<a href="http://qiita.com/suin/items/c4ba1cfd354586bbed59" target="_blank" rel="external">速い</a>かもです(Scalaはcompile時間が長いと言われている)。<br>メモリを指定しないと1Gしか割り当てられないので増やしておきます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ docker-machine create -d virtualbox --virtualbox-memory 2048 scalanative</div></pre></td></tr></table></figure>
<p>docker-machineが立ち上がったらsshで繋ぎます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ docker-machine ssh scala-native</div></pre></td></tr></table></figure>
<p>管理用のスクリプトはbashで動くのですが、Boot2Dockerは標準でbashが入っていないので次に進む前に<a href="https://t-hiroyoshi.github.io/docker-machine-bash/">ここ</a>を参考にbashをインストールしてください。</p>
<h2 id="Scala-Nativeのコンテナイメージをビルドする"><a href="#Scala-Nativeのコンテナイメージをビルドする" class="headerlink" title="Scala Nativeのコンテナイメージをビルドする"></a>Scala Nativeのコンテナイメージをビルドする</h2><p>まずはともかくScala Nativeのソースをcloneしてきます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ git clone https://github.com/scala-native/scala-native.git</div></pre></td></tr></table></figure>
<p><code>scala-native/docker</code>の中にDockerfileがあるので移動して管理用のスクリプトを叩きます。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cd scala-native/docker</div><div class="line">$ ./manage.sh build</div></pre></td></tr></table></figure>
<p>色々ダウンロードしたりするので結構時間がかかります。</p>
<p>時間がかかります辛抱強く待って下さい、コーヒーでも飲んでいれば良いと思います。<br>ビルドが終わったらいよいよデモを動かします。</p>
<h2 id="Scala-Nativeのデモを実行する"><a href="#Scala-Nativeのデモを実行する" class="headerlink" title="Scala Nativeのデモを実行する"></a>Scala Nativeのデモを実行する</h2><p>スクリプトを叩いてビルドしたコンテナの中に入ります。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ ./manage.sh run</div></pre></td></tr></table></figure>
<p>ここでエラーが出てsbtプロジェクトが読み込まれない方は<code>scala-native/</code>配下のtargetフォルダを全て削除してみてください。<br>コンテナに入れたらsbtを起動してデモがあるdemoNativeプロジェクトを指定します。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ sbt</div><div class="line">&gt; project demoNative</div><div class="line">&gt; run</div></pre></td></tr></table></figure>
<p>後は<code>run</code>すればデモが動き出してコンパイルされたバイナリが<code>scala-native/demo/native/target/scala-2.11/demonative-out</code>に吐き出されているはずです。</p>
<p>これはそのまま実行できるのでいろいろ試してみてください。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;最近は&lt;a href=&quot;http://event.scaladays.org/scaladays-nyc-2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scala Days 2016 NYC&lt;/a&gt;
    
    </summary>
    
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="docker" scheme="http://t-hiroyoshi.github.io/tags/docker/"/>
    
      <category term="scala-native" scheme="http://t-hiroyoshi.github.io/tags/scala-native/"/>
    
  </entry>
  
  <entry>
    <title>Docker Machineでbashを使えるようにする</title>
    <link href="http://t-hiroyoshi.github.io/docker-machine-bash/"/>
    <id>http://t-hiroyoshi.github.io/docker-machine-bash/</id>
    <published>2016-06-19T14:22:43.000Z</published>
    <updated>2016-06-20T09:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Machineめっちゃ便利ですがBoot2Docker上で作業をしている時、コンテナをShell Scriptで管理していて困ったことありませんか?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker@dev:/Users/t-hiroyoshi/git/some-project/docker$ ./manage.sh build</div><div class="line">env: can&apos;t execute &apos;bash&apos;: No such file or directory</div></pre></td></tr></table></figure>
<p>bashがBoot2Dockerに入ってない!これは困る!ということでBoot2Dockerにbashを入れる方法です。<br>Boot2Dockerは<a href="http://tinycorelinux.net" target="_blank" rel="external">Tiny Core Linux</a>ベースで動いているのでそのパッケージ管理システム(<a href="http://wiki.tinycorelinux.net/wiki:tce-load" target="_blank" rel="external">tce-load</a>)を利用してあげれば万事解決です。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker@dev:/Users/t-hiroyoshi/git/some-project/docker$ tce-load -wi bash</div></pre></td></tr></table></figure>
<p>これでbashが使えるようになったのでbash Shell Scriptが使えます。<br>Docker Machine(Boot2Docker)上に状態を持つのはあまり良くない気がしますがまあbashぐらいはあってもいいのではと思いました。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Machineめっちゃ便利ですがBoot2Docker上で作業をしている時、コンテナをShell Scriptで管理していて困ったことありませんか?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="docker" scheme="http://t-hiroyoshi.github.io/tags/docker/"/>
    
      <category term="shell" scheme="http://t-hiroyoshi.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Akka HTTP vs Spray</title>
    <link href="http://t-hiroyoshi.github.io/spray-akka-benchmark/"/>
    <id>http://t-hiroyoshi.github.io/spray-akka-benchmark/</id>
    <published>2016-04-15T13:01:19.000Z</published>
    <updated>2016-08-04T07:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、t-hiroyoshiです。<br>今回は<a href="http://t-hiroyoshi.github.io/akka-http-api/">前回紹介</a>した<a href="http://doc.akka.io/docs/akka/2.4.4/scala/http/introduction.html" target="_blank" rel="external">Akka HTTP</a>の性能が気になったのでざっくりベンチマークを取ってみました。<br>ソースコードは<a href="https://github.com/t-hiroyoshi/akka-http-vs-spray" target="_blank" rel="external">Github</a>にあげました。</p>
<p>それぞれのバージョン等は以下の通りです。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="comment">// sbt.version = 0.13.11</span></div><div class="line"><span class="comment">// addSbtPlugin("io.spray" % "sbt-revolver" % "0.8.0")</span></div><div class="line"><span class="comment">// addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "0.14.2")</span></div><div class="line"></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> commonSettings = <span class="type">Seq</span>(</div><div class="line">  name := <span class="string">"akka-http-vs-spray"</span>,</div><div class="line">  version := <span class="string">"1.0.0"</span>,</div><div class="line">  scalaVersion := <span class="string">"2.11.8"</span>,</div><div class="line">  scalacOptions := <span class="type">Seq</span>(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>, <span class="string">"-encoding"</span>, <span class="string">"utf8"</span>, <span class="string">"-Xlint"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">val</span> akkaV = <span class="string">"2.4.4"</span></div><div class="line"><span class="keyword">val</span> sprayV = <span class="string">"1.3.3"</span></div><div class="line"></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> spraySettings = <span class="type">Seq</span>(</div><div class="line">  libraryDependencies ++= &#123;</div><div class="line">    <span class="type">Seq</span>(</div><div class="line">      <span class="string">"com.typesafe.akka"</span>   %%  <span class="string">"akka-actor"</span>    % akkaV,</div><div class="line">      <span class="string">"io.spray"</span>            %%  <span class="string">"spray-can"</span>     % sprayV,</div><div class="line">      <span class="string">"io.spray"</span>            %%  <span class="string">"spray-routing"</span> % sprayV</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> akkaSettings = <span class="type">Seq</span>(</div><div class="line">  libraryDependencies ++= &#123;</div><div class="line">    <span class="type">Seq</span>(</div><div class="line">      <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-actor"</span> % akkaV,</div><div class="line">      <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-stream"</span> % akkaV,</div><div class="line">      <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-http-experimental"</span> % akkaV</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> sprayServer = (project in file(<span class="string">"spray-server"</span>))</div><div class="line">.settings(commonSettings: _*)</div><div class="line">.settings(spraySettings: _*)</div><div class="line">.settings(assemblyOutputPath in assembly := file(<span class="string">"./spray-server.jar"</span>))</div><div class="line"></div><div class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> akkaServer = (project in file(<span class="string">"akka-server"</span>))</div><div class="line">.settings(commonSettings: _*)</div><div class="line">.settings(akkaSettings: _*)</div><div class="line">.settings(assemblyOutputPath in assembly := file(<span class="string">"./akka-server.jar"</span>))</div><div class="line"></div><div class="line"><span class="type">Revolver</span>.settings</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java version &quot;1.8.0_71&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_71-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)</div></pre></td></tr></table></figure>
<p><code>sbt assembly</code>したjarをローカルで<code>java -jar</code>してベンチマークをとりました。</p>
<p>ローカル環境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MacBook Pro (Retina, 13-inch, Early 2015)</div><div class="line">OS: OSX 10.11.4</div><div class="line">Processor: 3.1 GHz Intel Core i7</div><div class="line">Memory: 16 GB 1867 MHz DDR3</div></pre></td></tr></table></figure>
<p>ベンチマークにはApacheBenchを用いました。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ab -k -c 10 -n 10000 http://localhost:8080/</div></pre></td></tr></table></figure>
<p>以下それぞれの結果です。</p>
<h2 id="Akka-HTTP"><a href="#Akka-HTTP" class="headerlink" title="Akka HTTP"></a>Akka HTTP</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> akka.server</div><div class="line"></div><div class="line"><span class="keyword">import</span> akka.actor.<span class="type">ActorSystem</span></div><div class="line"><span class="keyword">import</span> akka.http.scaladsl.<span class="type">Http</span></div><div class="line"><span class="keyword">import</span> akka.http.scaladsl.server.<span class="type">Directives</span>._</div><div class="line"><span class="keyword">import</span> akka.stream.<span class="type">ActorMaterializer</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Boot</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">"akka-server"</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> materializer = <span class="type">ActorMaterializer</span>()</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ec = system.dispatcher</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> route =</div><div class="line">    pathSingleSlash &#123;</div><div class="line">      get &#123;</div><div class="line">        complete(<span class="string">"Hello world!"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="type">Http</span>().bindAndHandle(route, <span class="string">"localhost"</span>, <span class="number">8080</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;</div><div class="line"></div><div class="line">Server Software:        akka-http/2.4.4</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      10</div><div class="line">Time taken for tests:   0.465 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Keep-Alive requests:    10000</div><div class="line">Total transferred:      1780000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    21490.49 [#/sec] (mean)</div><div class="line">Time per request:       0.465 [ms] (mean)</div><div class="line">Time per request:       0.047 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          3735.65 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.0      0       0</div><div class="line">Processing:     0    0   1.0      0      42</div><div class="line">Waiting:        0    0   1.0      0      42</div><div class="line">Total:          0    0   1.0      0      42</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%      0</div><div class="line">  66%      0</div><div class="line">  75%      0</div><div class="line">  80%      0</div><div class="line">  90%      1</div><div class="line">  95%      1</div><div class="line">  98%      2</div><div class="line">  99%      3</div><div class="line"> 100%     42 (longest request)</div></pre></td></tr></table></figure>
<h2 id="Spray-can"><a href="#Spray-can" class="headerlink" title="Spray-can"></a>Spray-can</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> spray.server</div><div class="line"></div><div class="line"><span class="keyword">import</span> akka.actor._</div><div class="line"><span class="keyword">import</span> akka.io.<span class="type">IO</span></div><div class="line"><span class="keyword">import</span> spray.can.<span class="type">Http</span></div><div class="line"><span class="keyword">import</span> spray.routing._</div><div class="line"><span class="keyword">import</span> spray.http._</div><div class="line"><span class="keyword">import</span> akka.pattern.ask</div><div class="line"><span class="keyword">import</span> akka.util.<span class="type">Timeout</span></div><div class="line"><span class="keyword">import</span> scala.concurrent.duration._</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Boot</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">"spray-server"</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> timeout = <span class="type">Timeout</span>(<span class="number">5.</span>seconds)</div><div class="line">  <span class="keyword">val</span> service = system.actorOf(<span class="type">Props</span>[<span class="type">ServiceActor</span>], <span class="string">"spray-service"</span>)</div><div class="line"></div><div class="line">  <span class="type">IO</span>(<span class="type">Http</span>) ? <span class="type">Http</span>.<span class="type">Bind</span>(service, <span class="string">"localhost"</span>, <span class="number">8080</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> <span class="keyword">with</span> <span class="title">HttpService</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> route =</div><div class="line">    pathSingleSlash &#123;</div><div class="line">      get &#123;</div><div class="line">        complete(<span class="string">"Hello world!"</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">actorRefFactory</span> </span>= context</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= runRoute(route)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;</div><div class="line"></div><div class="line">Server Software:        spray-can/1.3.3</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      10</div><div class="line">Time taken for tests:   0.430 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Keep-Alive requests:    10000</div><div class="line">Total transferred:      1780000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    23230.85 [#/sec] (mean)</div><div class="line">Time per request:       0.430 [ms] (mean)</div><div class="line">Time per request:       0.043 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          4038.18 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.0      0       0</div><div class="line">Processing:     0    0   0.9      0      20</div><div class="line">Waiting:        0    0   0.9      0      20</div><div class="line">Total:          0    0   0.9      0      20</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%      0</div><div class="line">  66%      0</div><div class="line">  75%      0</div><div class="line">  80%      0</div><div class="line">  90%      1</div><div class="line">  95%      1</div><div class="line">  98%      2</div><div class="line">  99%      3</div><div class="line"> 100%     20 (longest request)</div></pre></td></tr></table></figure>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p> Akka HTTPが21490.49 req/sec、Spray-canが23230.85 req/secと割と近い数値が出た気がします。<br> Akka HTTPは前もっと使い物にならないくらい遅かったイメージだったんですがこれなら十分なリクエストがさばけそうです。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;今回は&lt;a href=&quot;http://t-hiroyoshi.github.io/akka-http-api/&quot;&gt;前回紹介&lt;/a&gt;した&lt;a href=&quot;http://doc.akka.io/docs/akka/2.4.4/sc
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
      <category term="benchmark" scheme="http://t-hiroyoshi.github.io/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>Akka-HTTPでREST APIを作る</title>
    <link href="http://t-hiroyoshi.github.io/akka-http-api/"/>
    <id>http://t-hiroyoshi.github.io/akka-http-api/</id>
    <published>2016-04-12T08:21:04.000Z</published>
    <updated>2016-04-18T06:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Akka-HTTP"><a href="#Akka-HTTP" class="headerlink" title="Akka-HTTP"></a>Akka-HTTP</h1><p>Akka-HTTPはAkka-ActorとAkka-StreamsをベースとしたAkkaのHTTP moduleです。<br>異なるレベルでのAPIを提供してくれているので高レベルから低レベルなところまでカスタムすることができて良いです。<br>あとは<a href="http://spray.io" target="_blank" rel="external">Spray</a>の開発チームがLightbend(旧Typesafe)にそのまま移行して開発している(?)ので割とSprayのAPI、DSLに似ている部分が多かったりしてSpray使ったことがある人は移行しやすいと思います。パフォーマンスは最近はSprayに迫るところまで来ていて実用に足るところまで来ているのでは無いでしょうか。<br>Akka-HTPPは幾つかのmoduleから成り立っていてそれぞれを軽く説明すると以下の感じになります。</p>
<ul>
<li>akka-http-core: ほとんどが低レベルで構成されていてhttp server, clientのためのmodule(WebSocketsも含む)</li>
<li>akka-http: 高レベルな関数やhttp serverのAPI定義などに使用出来るDSLを含んでいるmodule</li>
<li>akka-http-testkit: http serverのためのテストツールmodule</li>
<li>akka-http-spray-json: JSONのシリアライズ、デシリアライズのためのmodule</li>
<li>akka-http-xml: XMLのシリアライズ、デシリアライズのためのmodule</li>
</ul>
<h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>UserのCRUDができるREST APIを作ってみます。<br>ソースコードは<a href="https://github.com/t-hiroyoshi/akka-http-standalone" target="_blank" rel="external">Github</a>にあげておきました。</p>
<h2 id="sbt"><a href="#sbt" class="headerlink" title="sbt"></a>sbt</h2><p>まずはplugin.sbtを書きます。<br>sbt-assemblyはStand-aloneなjarを作るのに使用します。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line">logLevel := <span class="type">Level</span>.<span class="type">Warn</span></div><div class="line"></div><div class="line">addSbtPlugin(<span class="string">"io.spray"</span> % <span class="string">"sbt-revolver"</span> % <span class="string">"0.8.0"</span>)</div><div class="line"></div><div class="line">addSbtPlugin(<span class="string">"com.eed3si9n"</span> % <span class="string">"sbt-assembly"</span> % <span class="string">"0.14.2"</span>)</div></pre></td></tr></table></figure>
<p>次にbuild.sbtに必要なライブラリを追記しておきます。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line">name := <span class="string">"akka-http-standalone"</span></div><div class="line"></div><div class="line">version := <span class="string">"1.0"</span></div><div class="line"></div><div class="line">scalaVersion := <span class="string">"2.11.8"</span></div><div class="line"></div><div class="line">scalacOptions := <span class="type">Seq</span>(<span class="string">"-unchecked"</span>, <span class="string">"-deprecation"</span>, <span class="string">"-encoding"</span>, <span class="string">"utf8"</span>, <span class="string">"-Xlint"</span>)</div><div class="line"></div><div class="line">assemblyOutputPath in assembly := file(<span class="string">"./akka-http-standalone.jar"</span>)</div><div class="line"></div><div class="line">libraryDependencies ++= &#123;</div><div class="line">  <span class="keyword">val</span> akkaV = <span class="string">"2.4.2"</span></div><div class="line"></div><div class="line">  <span class="type">Seq</span>(</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-actor"</span> % akkaV,</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-stream"</span> % akkaV,</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-http-experimental"</span> % akkaV,</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-http-spray-json-experimental"</span> % akkaV,</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-http-xml-experimental"</span> % akkaV,</div><div class="line">    <span class="string">"com.typesafe.akka"</span> %% <span class="string">"akka-http-testkit"</span> % akkaV</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">Revolver</span>.settings</div></pre></td></tr></table></figure>
<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><p>Routeを書く前にデータやリクエストを定義します、JSONを使いたいのでさらにJsonProtocolも定義します。<br>jsonFormatの後ろについている1や2はClassのパラメータ数を表しています。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> spray.json.<span class="type">DefaultJsonProtocol</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyData</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id: <span class="type">Int</span>, name: <span class="type">String</span></span>)</span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span>(<span class="params">message: <span class="type">String</span></span>)</span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateUserRequest</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateUserRequest</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">JsonProtocol</span> <span class="keyword">extends</span> <span class="title">DefaultJsonProtocol</span> </span>&#123;</div><div class="line">  <span class="keyword">import</span> <span class="type">MyData</span>._</div><div class="line"></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> userFormat = jsonFormat2(<span class="type">User</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> errorResponse = jsonFormat1(<span class="type">ErrorResponse</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> createUserRequestFormat = jsonFormat1(<span class="type">CreateUserRequest</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> updateUserRequest = jsonFormat1(<span class="type">UpdateUserRequest</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>データの定義が完了したので実際にRouteを書いていきます、ほぼSprayの書き方と同じです。<br>本来であればRouteとServiceは分離してあった方が良い気がしますが今回は気にせず一体型にします。<br>JSONを使いたいのでSprayJsonSupportを継承しています、この辺まだSprayのままみたいですね。<br>先に定義したJsonProtocolをimportしないとcompileが通らないので注意してください。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> akka.http.scaladsl.marshallers.sprayjson.<span class="type">SprayJsonSupport</span></div><div class="line"><span class="keyword">import</span> akka.http.scaladsl.model._</div><div class="line"><span class="keyword">import</span> akka.http.scaladsl.server.<span class="type">Directives</span>._</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">SprayJsonSupport</span> </span>&#123;</div><div class="line">  <span class="keyword">import</span> <span class="type">MyData</span>._</div><div class="line">  <span class="keyword">import</span> <span class="type">JsonProtocol</span>._</div><div class="line"></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> db: <span class="type">DB</span></div><div class="line"></div><div class="line">  <span class="keyword">val</span> routes =</div><div class="line">    pathSingleSlash &#123;</div><div class="line">      get &#123;</div><div class="line">        <span class="comment">// GET localhost:8080</span></div><div class="line">        index()</div><div class="line">      &#125;</div><div class="line">    &#125; ~</div><div class="line">      path(<span class="string">"ping"</span>) &#123;</div><div class="line">        get &#123;</div><div class="line">          <span class="comment">// GET localhost:8080/ping</span></div><div class="line">          complete(<span class="string">"pong"</span>)</div><div class="line">        &#125;</div><div class="line">      &#125; ~</div><div class="line">      pathPrefix(<span class="string">"users"</span>) &#123;</div><div class="line">        pathEndOrSingleSlash &#123;</div><div class="line">          get &#123;</div><div class="line">            <span class="comment">// GET localhost:8080/users</span></div><div class="line">            getUsers()</div><div class="line">          &#125; ~</div><div class="line">            post &#123;</div><div class="line">              <span class="comment">// POST localhost:8080/users</span></div><div class="line">              entity(as[<span class="type">CreateUserRequest</span>]) &#123; request =&gt;</div><div class="line">                createUser(request.name)</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; ~</div><div class="line">          path(<span class="type">IntNumber</span>) &#123; id =&gt;</div><div class="line">            get &#123;</div><div class="line">              <span class="comment">// GET localhost:8080/users.:id</span></div><div class="line">              getUser(id)</div><div class="line">            &#125; ~</div><div class="line">              patch &#123;</div><div class="line">                <span class="comment">// PATCH localhost:8080/users.:id</span></div><div class="line">                entity(as[<span class="type">UpdateUserRequest</span>]) &#123; request =&gt;</div><div class="line">                  updateUser(id, request.name)</div><div class="line">                &#125;</div><div class="line">              &#125; ~</div><div class="line">              delete &#123;</div><div class="line">                <span class="comment">// DELETE localhost:8080/users.:id</span></div><div class="line">                deleteUser(id)</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span></span>() = complete(</div><div class="line">    <span class="type">HttpResponse</span>(</div><div class="line">      entity = <span class="type">HttpEntity</span>(</div><div class="line">        <span class="type">ContentTypes</span>.`text/html(<span class="type">UTF</span><span class="number">-8</span>)`,</div><div class="line">        &lt;html&gt;</div><div class="line">          &lt;body&gt;</div><div class="line">            &lt;h1&gt;<span class="type">Welcome</span> to &lt;i&gt;akka-http&lt;/i&gt;!&lt;/h1&gt;</div><div class="line">          &lt;/body&gt;</div><div class="line">        &lt;/html&gt;.toString</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> userNotFound = <span class="string">"user_not_found"</span></div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">createUser</span></span>(name: <span class="type">String</span>)(<span class="keyword">implicit</span> db: <span class="type">DB</span>) =</div><div class="line">    db.createUser(name) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Left</span>(err) =&gt;</div><div class="line">        failWith(err)</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(user) =&gt;</div><div class="line">        complete(user)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">getUsers</span></span>()(<span class="keyword">implicit</span> db: <span class="type">DB</span>) =</div><div class="line">    db.getUsers <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Left</span>(err) =&gt;</div><div class="line">        failWith(err)</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(users) =&gt;</div><div class="line">        complete(users)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">getUser</span></span>(id: <span class="type">Int</span>)(<span class="keyword">implicit</span> db: <span class="type">DB</span>) =</div><div class="line">    db.getUser(id) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Left</span>(err) =&gt;</div><div class="line">        failWith(err)</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(<span class="type">None</span>) =&gt;</div><div class="line">        complete(<span class="type">StatusCodes</span>.<span class="type">NotFound</span> -&gt; <span class="type">ErrorResponse</span>(userNotFound))</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(<span class="type">Some</span>(user)) =&gt;</div><div class="line">        complete(user)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">updateUser</span></span>(id: <span class="type">Int</span>, name: <span class="type">String</span>)(<span class="keyword">implicit</span> db: <span class="type">DB</span>) =</div><div class="line">    db.updateUser(id, name) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Left</span>(err) =&gt;</div><div class="line">        failWith(err)</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(<span class="type">None</span>) =&gt;</div><div class="line">        complete(<span class="type">StatusCodes</span>.<span class="type">NotFound</span> -&gt; <span class="type">ErrorResponse</span>(userNotFound))</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(<span class="type">Some</span>(user)) =&gt;</div><div class="line">        complete(user)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span></span>(id: <span class="type">Int</span>)(<span class="keyword">implicit</span> db: <span class="type">DB</span>) =</div><div class="line">    db.deleteUser(id) <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Left</span>(err) =&gt;</div><div class="line">        failWith(err)</div><div class="line">      <span class="keyword">case</span> <span class="type">Right</span>(()) =&gt;</div><div class="line">        complete(<span class="type">StatusCodes</span>.<span class="type">OK</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>indexとpingは関係ないですがサンプルとして追加しました。<br>リクエストの処理が完了して手っ取り早くOKだけ返したい時は<code>StatusCodes.OK</code>を使ってあげると簡単です。<br>全体的に特に難しいところもなく割と直感的に書けるところは良いですね。<br>他に便利なrouting DSLもたくさんあるので公式ドキュメントで適宜探してみると良いと思います。<br>次にDBのモックをこんな感じに作っておきます。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="type">MyData</span>.<span class="type">User</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">DB</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createUser</span></span>(name: <span class="type">String</span>): <span class="type">Either</span>[<span class="type">Throwable</span>, <span class="type">User</span>]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getUsers</span></span>: <span class="type">Either</span>[<span class="type">Throwable</span>, <span class="type">Seq</span>[<span class="type">User</span>]]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getUser</span></span>(id: <span class="type">Int</span>): <span class="type">Either</span>[<span class="type">Throwable</span>, <span class="type">Option</span>[<span class="type">User</span>]]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">updateUser</span></span>(id: <span class="type">Int</span>, name: <span class="type">String</span>): <span class="type">Either</span>[<span class="type">Throwable</span>, <span class="type">Option</span>[<span class="type">User</span>]]</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span></span>(id: <span class="type">Int</span>): <span class="type">Either</span>[<span class="type">Throwable</span>, <span class="type">Unit</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">MockDB</span> <span class="keyword">extends</span> <span class="title">DB</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> user_table = <span class="type">Seq</span>[<span class="type">User</span>]()</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> next_user_id = <span class="number">0</span></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">nextId</span></span>() = &#123;</div><div class="line">    next_user_id += <span class="number">1</span></div><div class="line">    next_user_id</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createUser</span></span>(name: <span class="type">String</span>) = &#123;</div><div class="line">    <span class="keyword">val</span> user = <span class="type">User</span>(nextId(), name)</div><div class="line">    user_table = user_table :+ user</div><div class="line">    <span class="type">Right</span>(user)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getUsers</span> </span>= <span class="type">Right</span>(user_table)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getUser</span></span>(id: <span class="type">Int</span>) = <span class="type">Right</span>(user_table.find(_.id == id))</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">updateUser</span></span>(id: <span class="type">Int</span>, name: <span class="type">String</span>) = &#123;</div><div class="line">    user_table = user_table.map(u =&gt;</div><div class="line">      <span class="keyword">if</span> (u.id == id) u.copy(name = name)</div><div class="line">      <span class="keyword">else</span> u</div><div class="line">    )</div><div class="line">    getUser(id)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span></span>(id: <span class="type">Int</span>) = &#123;</div><div class="line">    user_table = user_table.filterNot(_.id == id)</div><div class="line">    <span class="type">Right</span>(())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Boot(Main)を書いていきます。この辺はSprayとちょっと異なる部分なので注意しながらやってみてください。<br>bindingが失敗したときのためにloggerを仕込んでいます。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> akka.actor.<span class="type">ActorSystem</span></div><div class="line"><span class="keyword">import</span> akka.event.<span class="type">Logging</span></div><div class="line"><span class="keyword">import</span> akka.http.scaladsl.<span class="type">Http</span></div><div class="line"><span class="keyword">import</span> akka.stream.<span class="type">ActorMaterializer</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Boot</span> <span class="keyword">extends</span> <span class="title">App</span> <span class="keyword">with</span> <span class="title">Route</span> </span>&#123;</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> system = <span class="type">ActorSystem</span>(<span class="string">"my-system"</span>)</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">lazy</span> <span class="keyword">val</span> materializer = <span class="type">ActorMaterializer</span>()</div><div class="line">  <span class="keyword">override</span> <span class="keyword">implicit</span> <span class="keyword">val</span> db = <span class="type">MockDB</span></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ec = system.dispatcher</div><div class="line">  <span class="keyword">val</span> interface = <span class="string">"localhost"</span></div><div class="line">  <span class="keyword">val</span> port = <span class="number">8080</span></div><div class="line">  <span class="keyword">val</span> logger = <span class="type">Logging</span>(system, getClass)</div><div class="line">  <span class="keyword">val</span> binding = <span class="type">Http</span>().bindAndHandle(routes, interface, port)</div><div class="line"></div><div class="line">  binding.onFailure &#123;</div><div class="line">    <span class="keyword">case</span> err: <span class="type">Exception</span> =&gt;</div><div class="line">      logger.error(err, <span class="string">s"Failed to bind to <span class="subst">$interface</span> <span class="subst">$port</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ここまできたらsbtでreStartしてみてください、API Serverが立ち上がると思います。<br>jarが欲しい場合は<code>sbt assembly</code>でjarが生成されます、Stand-aloneなjarなので扱いやすいのが嬉しいです。</p>
<p>Akka-HTTPは本当にSprayとほぼ同じ感じでかけるので使ったことある人はとっつきやすいと思いました。<br>現在はパフォーマンスチューニングを中心に開発しているようなのでどこまでSprayに近づけるのか楽しみですね。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Akka-HTTP&quot;&gt;&lt;a href=&quot;#Akka-HTTP&quot; class=&quot;headerlink&quot; title=&quot;Akka-HTTP&quot;&gt;&lt;/a&gt;Akka-HTTP&lt;/h1&gt;&lt;p&gt;Akka-HTTPはAkka-ActorとAkka-StreamsをベースとしたAk
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
      <category term="spray" scheme="http://t-hiroyoshi.github.io/tags/spray/"/>
    
  </entry>
  
  <entry>
    <title>CyberAgentさんのアドテクコンペで特別賞頂いた話</title>
    <link href="http://t-hiroyoshi.github.io/adtech-compe/"/>
    <id>http://t-hiroyoshi.github.io/adtech-compe/</id>
    <published>2016-03-01T16:22:05.000Z</published>
    <updated>2016-04-16T09:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、t-hiroyoshiです。<br>ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。</p>
<p>今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというものでした。<br>DSPとは飛んでくる入札のリクエストに対しいくらでどんな広告を出したいかを返すものです、なので求められるものとしては高トラフィック(今回は2000QPS)をさばきつつ配信する広告を選び適切な価格で入札できるものといった感じです。さらにDSPには応答速度も問われ今回は100ms以内にレスポンスが返せないものは無効になるという設定でした。最終的な評価はCPC(クリックあたりのコスト)と予算の消化率で行われました。</p>
<p>参加した理由ですがそろそろプログラミングやり始めて1年だしハッカソン的なのに出てみたいなって思っていた時にScalaMatsuri2016で見かけたCyberAgentさんのホームページ見てみてみたら学生向けのハッカソンの参加者を募集していて、何か面白そうだし応募してみたところ参加権を貰えたというのが理由です。</p>
<h1 id="作ったもの-作ろうとしたもの"><a href="#作ったもの-作ろうとしたもの" class="headerlink" title="作ったもの(作ろうとしたもの)"></a>作ったもの(作ろうとしたもの)</h1><p>僕のチームはエンジニアの自分とデータサイエンティストのSou Konishi, Kouichi Takayamaの3人チームでした。お互いの強みを生かしつつなるべく依存し合わないような設計をしようと以下のようなアーキテクチャにしました。</p>
<p><img src="/img/adtechArchitecture.png" alt="architecture" title="architecture"></p>
<p>最初はAWSに依存しすぎるのが嫌だったのでKinesisではなくKafka Cluster使いたかったのですが、時間的に厳しいと判断して大人しくKinesis使いました。またConsumer側はマイクロサービス群なので拡張性があり、新たな機能を追加しやすいかなとか考えました。<br>イメージとしてはScalaをマイクロサービスプラットフォーム的な立ち位置で置いてスケールさせたかった感じです。<br>Producer~Consumer間で評価モデルの受け渡しをどうするのか迷っていましたが、Kinesisを使うことにしたのでAWSどっぷりで良いやってなってめっちゃ早と噂のMemcachedをElastiCache上で使うことにしました。Memcached使ったことなかったのでどういう感じに使えば良いか分からずConsumer側(Python)でセットすると余計なヘッダが付いてくるとかに悩まされScalaのパーサー書くのが辛かったです。<br>評価モデルの生成はデータサイエンティストの2人がKinesisの強みを生かしたオンライン学習ベースで随時最新のモデルをExportできるようにしてくれました。僕はデータサイエンティストの2人がJupyter使ってデータこねくり回しているのを見てはーすっげってなってました。<br>AkkaにはKamonが仕込んであって、Actorの最適化や監視に使う予定でしたが時間切れで仕込んだだけになってしまいました。</p>
<p>最終的に骨組みを作りきりProducer側も上手く分散化ができたのですが、評価モデルの読み込みフォーマットと評価モデルの展開式をミスって計算が爆発してメッセージ消化しきれなくてActor死にまくるみたいになってまともに動きませんでした、Kamon生かせなかった…<br>完全にエンジニアリソースが足りておらず作り込み不足でした、ごめんなさい。</p>
<p>開発後にチームでプレゼンをする機会があったのですが、徹夜開発に加え本番でまともに動かなかった絶望感から頭おかしい感じのプレゼンになっていたと思います(笑)。<br>ですが、嬉しいことに技術選定や設計、オンライン学習などを評価して頂きなんと<strong>特別賞</strong>を頂くことができました。</p>
<h1 id="感想と反省"><a href="#感想と反省" class="headerlink" title="感想と反省"></a>感想と反省</h1><p>今回はCyberAgentさん主催だったのでレッドブルを出してくれたりお菓子食べ放題だったりピザが食べられたり美味しいコーヒーを準備してくれたり環境としては至れり尽くせりで開発に集中することができました、感謝です。</p>
<p>チームメイトとの絆も(徹夜の)開発を通して生まれてとても濃いハッカソンになりました。<br>今回は開発時間的に忙しすぎてメンターの方々とあまり交流できなかったので少し残念でしたが、Kinesisの情報を頂いたりできたので良かったです。<br>KinesisやMemcachedといった技術は使ったことがなかったものなのでこの機会に使えることができて良かったですが、初ハッカソンということで張り切りすぎて技術選定を大きくしすぎた感があってエンジニアリソースが足りず最後まで作り込めませんでした。今回参加してみて実際のリソース感を体感できたので次回に生かしたいと思います。ハッカソンに限ってはベンダロックインを許容してどっぷり浸かった方が他に集中できて楽とか色々なことを学びました。</p>
<p>まとめると初ハッカソンは本番で動かないという絶望的な結果に終わりましたが、特別賞を貰えたので救われました。ハッカソン的な短期集中開発は自分の性格的にかなり楽しめたのでこれからもハッカソンに積極的に参加していきたいです。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;こんにちは、t-hiroyoshiです。&lt;br&gt;ハッカソンデビュー！ということでCyberAgentさん主催のアドテクコンペに参加してきた話です。&lt;/p&gt;
&lt;p&gt;今回のテーマはアドテクで広告入札の部分に関わるDSP(Demand-Side Platform)を作るというもの
    
    </summary>
    
    
      <category term="akka" scheme="http://t-hiroyoshi.github.io/tags/akka/"/>
    
      <category term="adtech" scheme="http://t-hiroyoshi.github.io/tags/adtech/"/>
    
      <category term="aws" scheme="http://t-hiroyoshi.github.io/tags/aws/"/>
    
      <category term="scala" scheme="http://t-hiroyoshi.github.io/tags/scala/"/>
    
      <category term="hackathon" scheme="http://t-hiroyoshi.github.io/tags/hackathon/"/>
    
      <category term="server" scheme="http://t-hiroyoshi.github.io/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>ReactでDrag&amp;Drop</title>
    <link href="http://t-hiroyoshi.github.io/react-drag-drop/"/>
    <id>http://t-hiroyoshi.github.io/react-drag-drop/</id>
    <published>2015-12-14T13:00:00.000Z</published>
    <updated>2016-10-13T03:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactDnDについて"><a href="#ReactDnDについて" class="headerlink" title="ReactDnDについて"></a>ReactDnDについて</h1><p>Reactでdrag&amp;dropコンポーネントを実装するのにおそらく一番有名(Redux作った人が作った)かつドキュメントが豊富なパッケージです。<a href="http://gaearon.github.io/react-dnd/" target="_blank" rel="external">ドキュメント</a>の情報量が結構多く自由度が高くて混乱しやすいので軽く使ってみたい人向けに核となるところだけ解説します。Danさん本当好き。</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>各コンポーネントをdrggable&amp;droppable化するためのAPIがES7のdecoratorとして提供されています。<br>babel6使っている人はdecoratorがまだ公式では対応していないみたいなので注意してください(babel5なら大丈夫です)。公式じゃなければbabel6用のプラグイン作っている人がいたと思うので探してみてください。</p>
<h2 id="DragSource"><a href="#DragSource" class="headerlink" title="DragSource"></a>DragSource</h2><p>ドラッグされるコンポーネントについての設定を行える。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> &#123; DragSource &#125; <span class="keyword">from</span> <span class="string">"react-dnd"</span>;</div><div class="line"></div><div class="line">@DragSouce(type, spec, collect)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DragComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>type</code>: dorpされる側はここで設定した<code>type</code>を見てdropを受け入れるか否かを決める、SymbolかString。</p>
<p><code>spec</code>: drag開始時の処理、drag終了時(dropされた時)の処理とかを書いたObject。例が後半にあります。</p>
<p><code>collect</code>: <code>DragComponent</code>内で使う関数を取り出す関数でobjectを返す必要があります。connectとmonitorが引数として渡されます。ざっくり言うとconnectはDOMについて、monitorはdrag&amp;dropの状態についてのObjectです、結構色々取れるので公式ドキュメント見てみてください。</p>
<h2 id="DropTarget"><a href="#DropTarget" class="headerlink" title="DropTarget"></a>DropTarget</h2><p>ドロップされるコンポーネントについての設定を行える。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> &#123; DropTarget &#125; <span class="keyword">from</span> <span class="string">"react-dnd"</span>;</div><div class="line"></div><div class="line">@DropTarget(types, spec, collect)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DropComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>types</code>: dropを受け入れる<code>type</code>を設定する、SymbolかStringかArray。</p>
<p><code>spec</code>: dropを受け入れた時の処理やhoverされている時の処理を書いたObject。例が後半にあります。</p>
<p><code>collect</code>: DragSourceの<code>collect</code>と同じ</p>
<h2 id="DragDropContext"><a href="#DragDropContext" class="headerlink" title="DragDropContext"></a>DragDropContext</h2><p>上記のコンポーネント達をこいつでラップすることで初めてdrag&amp;dropができるようになる。Backendが必要。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> HTML5Backend <span class="keyword">from</span> <span class="string">"react-dnd-html5-backend"</span>;</div><div class="line"><span class="keyword">import</span> &#123; DragDropContext &#125; <span class="keyword">from</span> <span class="string">"react-dnd"</span>;</div><div class="line"></div><div class="line">@DragDropContext(HTML5Backend)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DnDComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// something</span></div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// DragComponent &amp; DropComponent</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例では<code>HTML5Backend</code>を使っているのでタッチには対応していません。タッチ対応のBackendもあるのでタッチ対応させたい人は探してみてください。</p>
<h1 id="実装例"><a href="#実装例" class="headerlink" title="実装例"></a>実装例</h1><p>drag&amp;dropするとメッセージを表示するコンポーネントを作ってみます。</p>
<h2 id="DnDItem-Componentを作る"><a href="#DnDItem-Componentを作る" class="headerlink" title="DnDItem Componentを作る"></a>DnDItem Componentを作る</h2><p>実際にdrag&amp;dropされるコンポーネントを作ります。<br>DragSourceとDropTargetは同時に使うことでdragもdropもできるコンポーネントを作ることが可能です。</p>
<p>drag&amp;dropされたときのactionは親からpropsとして受け取ります。<br>またtypeも同様に親からpropsとして受け取っています。</p>
<p>DragSourceとDropTarget間は基本的にmonitorを通して値のやり取りをします。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> &#123; DragSource, DropTarget &#125; <span class="keyword">from</span> <span class="string">"react-dnd"</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dragSpec = &#123;</div><div class="line">  <span class="comment">// dragが始まったときの処理</span></div><div class="line">  beginDrag(props) &#123;</div><div class="line">    <span class="comment">// dragされ始めたら自分のidを返す</span></div><div class="line">    <span class="keyword">const</span> &#123; id &#125; = props;</div><div class="line">    <span class="keyword">return</span> &#123; id &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// dragが終わったときの処置</span></div><div class="line">  endDrag(props, monitor) &#123;</div><div class="line">    <span class="comment">// beginDragで返されたidを取ってくる</span></div><div class="line">    <span class="keyword">const</span> source = monitor.getItem();</div><div class="line">    <span class="comment">// dropSpecのdropで返されたidを取ってくる</span></div><div class="line">    <span class="keyword">const</span> target = monitor.getDropResult();</div><div class="line">    <span class="comment">// dropActionを発火させる</span></div><div class="line">    <span class="keyword">if</span> (target) props.dropAction(source.id, target.id);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dropSpec = &#123;</div><div class="line">  <span class="comment">// dropされたときの処理</span></div><div class="line">  drop(props, monitor, component) &#123;</div><div class="line">    <span class="comment">// dropされたら自分のidを返す</span></div><div class="line">    <span class="keyword">const</span> &#123; id &#125; = props;</div><div class="line">    <span class="keyword">return</span> &#123; id &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// DropTargetとDragSourceを使っているのでdragもdropもできる</span></div><div class="line">@DropTarget(<span class="function"><span class="params">props</span> =&gt;</span> props.type, dropSpec, connect =&gt; (&#123; <span class="attr">connectDropTarget</span>: connect.dropTarget() &#125;))</div><div class="line">@DragSource(<span class="function"><span class="params">props</span> =&gt;</span> props.type, dragSpec, connect =&gt; (&#123; <span class="attr">connectDragSource</span>: connect.dragSource() &#125;))</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DnDItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">connectDragSource</span>: React.PropTypes.func.isRequired,</div><div class="line">    <span class="attr">connectDropTarget</span>: React.PropTypes.func.isRequired,</div><div class="line">    <span class="attr">dropAction</span>: React.PropTypes.func.isRequired,</div><div class="line">    <span class="attr">id</span>: React.PropTypes.string.isRequired,</div><div class="line">    <span class="attr">name</span>: React.PropTypes.string.isRequired</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123;</div><div class="line">      connectDragSource,</div><div class="line">      connectDropTarget,</div><div class="line">      name</div><div class="line">    &#125; = <span class="keyword">this</span>.props;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> connectDragSource(connectDropTarget(</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;h3&gt;&#123;name&#125;&lt;/h3&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    ));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DnDField-Componentを作る"><a href="#DnDField-Componentを作る" class="headerlink" title="DnDField Componentを作る"></a>DnDField Componentを作る</h2><p>DnDItem Componentをラップする親玉を作ります、stateはこのコンポーネントで管理して更新用のactionをDnDItemに渡します。</p>
<p>今回はidをkeyとして渡しています、keyはReactDnD内部でのDOMの参照に使われるのでValueObjectである必要があります。あまりにも適当なものを渡すと壊れるので気をつけてください(React始めたばっかりの時Math.random()とか渡してて死にそうになった)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> HTML5Backend <span class="keyword">from</span> <span class="string">"react-dnd-html5-backend"</span>;</div><div class="line"><span class="keyword">import</span> &#123; DragDropContext &#125; <span class="keyword">from</span> <span class="string">"react-dnd"</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> DnDItem <span class="keyword">from</span> <span class="string">"./DnDItem"</span>;</div><div class="line"></div><div class="line"><span class="comment">// DragDropContextでラップする</span></div><div class="line">@DragDropContext(HTML5Backend)</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DnDField</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">list</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="string">"1"</span>, <span class="attr">name</span>: <span class="string">"foo"</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="string">"2"</span>, <span class="attr">name</span>: <span class="string">"bar"</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="string">"3"</span>, <span class="attr">name</span>: <span class="string">"bad"</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="string">"4"</span>, <span class="attr">name</span>: <span class="string">"qux"</span>&#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">message</span>: <span class="string">""</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  dropAction(sourceId, targetId) &#123;</div><div class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="keyword">this</span>.state;</div><div class="line"></div><div class="line">    <span class="comment">// message更新 Redux使うならここでaction, それぞれのidが渡ってくる</span></div><div class="line">    <span class="keyword">const</span> sourceName = list.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === sourceId).name;</div><div class="line">    <span class="keyword">const</span> targetName = list.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id === targetId).name;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;sourceName&#125;</span> dropped on <span class="subst">$&#123;targetName&#125;</span>`</span>&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()</div><div class="line">    <span class="keyword">const</span> &#123; list, message &#125; = <span class="keyword">this</span>.state;</div><div class="line">    <span class="keyword">const</span> itemType = <span class="built_in">Symbol</span>(<span class="string">"item"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;&#123;message&#125;&lt;/h1&gt;</div><div class="line">        &lt;ol&gt;</div><div class="line">          &#123;list.map(item =&gt;</div><div class="line">            &lt;DnDItem id=&#123;item.id&#125; name=&#123;item.name&#125; type=&#123;itemType&#125; dropAction=&#123;::this.dropAction&#125; key=&#123;item.id&#125;/&gt;</div><div class="line">          )&#125;</div><div class="line">        &lt;/ol&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これでdragされたComponentのidとdropされたComponentのidが取得できる実装が出来ました。idが取得できればあとはどうにでもできるので実際の開発に生かすことができればと思います。</p>
<p>今回紹介したのはReactDnDのほんの一部で他にもたくさんのオプションがあるので是非ドキュメントを読んでカスタムしてみてください。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ReactDnDについて&quot;&gt;&lt;a href=&quot;#ReactDnDについて&quot; class=&quot;headerlink&quot; title=&quot;ReactDnDについて&quot;&gt;&lt;/a&gt;ReactDnDについて&lt;/h1&gt;&lt;p&gt;Reactでdrag&amp;amp;dropコンポーネントを実装す
    
    </summary>
    
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://t-hiroyoshi.github.io/tags/reactjs/"/>
    
      <category term="client" scheme="http://t-hiroyoshi.github.io/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>Hexoを使って無料でブログを公開する</title>
    <link href="http://t-hiroyoshi.github.io/start-hexo/"/>
    <id>http://t-hiroyoshi.github.io/start-hexo/</id>
    <published>2015-11-19T13:14:39.000Z</published>
    <updated>2016-03-19T10:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="なぜHexoなのか"><a href="#なぜHexoなのか" class="headerlink" title="なぜHexoなのか"></a>なぜHexoなのか</h1><ul>
<li>Node.jsでやれる</li>
<li>めっちゃ簡単に静的サイトを構築できる</li>
<li>テーマが多くて完成度が高い、さらにカスタムできる</li>
<li>Markdownで記事が書けるので嬉しいよ!<br><br></li>
</ul>
<h1 id="Hexoを使ってブログを公開するまでの手順"><a href="#Hexoを使ってブログを公開するまでの手順" class="headerlink" title="Hexoを使ってブログを公開するまでの手順"></a>Hexoを使ってブログを公開するまでの手順</h1><h2 id="Hexoをインストールする"><a href="#Hexoをインストールする" class="headerlink" title="Hexoをインストールする"></a>Hexoをインストールする</h2><p>まずはnpmでHexoをインストールします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p>次にブログの雛形を作成して依存パッケージをインストールします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">hexo init &lt;your-blog-name&gt;</div><div class="line"><span class="built_in">cd</span> &lt;your-blog-name&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>ここまでくれば実際にページを見ることが可能です、<code>hexo server</code>と打った後<a href="http://localhost:4000" target="_blank" rel="external">localhost:4000</a>にアクセスしてみてください。デフォルトのテーマなので好みはあると思いますが、テーマは後で変えられるので安心してください!</p>
<h2 id="Github-Pagesでブログを公開する"><a href="#Github-Pagesでブログを公開する" class="headerlink" title="Github Pagesでブログを公開する"></a>Github Pagesでブログを公開する</h2><p>ブログをGitHub Pagesを利用して公開してみようと思います、まずは<code>&lt;user-name&gt;.github.io</code>という名前のレポジトリを作成します。<br>デプロイはGitで行いたいと思うのでプラグインをインストールします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>次にレポジトリの登録を行います、先ほど作成した雛形の中にある<code>_config.yml</code>を下記のように編集してください。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> git@github.com:&lt;user-name&gt;/&lt;user-name&gt;.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
<p>これでブログを公開する準備は完了です、デプロイしてみましょう。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">hexo deploy -g</div></pre></td></tr></table></figure>
<p>無事にデプロイできたら<code>http://&lt;user-name&gt;.github.io</code>にアクセスしてみてください、ブログが表示されれば成功です!</p>
<h2 id="記事の追加をする"><a href="#記事の追加をする" class="headerlink" title="記事の追加をする"></a>記事の追加をする</h2><p>記事の追加は下記のコマンドを打つことで可能です、タイトルがそのままファイル名になるので日本語などは避けたほうが良いです。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">hexo new <span class="string">"page-title"</span></div></pre></td></tr></table></figure>
<p>そうすると<code>source/_posts</code>の中に<code>page-title.md</code>ができていると思います、Markdownでゴリゴリ中身を書きましょう。<code>hexo server</code>でサーバーを動かしながら書くとブラウザをリロードするたびに更新されていくのでプレビュー代わりに使えます。<br>記事を書き終えたら公開して、Github Pagesにアクセスして実際に見てみてください。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">hexo deploy -g</div></pre></td></tr></table></figure>
<h2 id="テーマをインストールする"><a href="#テーマをインストールする" class="headerlink" title="テーマをインストールする"></a>テーマをインストールする</h2><p>まずはGithubなどで導入したいテーマを見つけてきてください、多分<code>hexo theme</code>とかで検索するとたくさん出てくると思います。細かい部分は自分で変更できるのでだいたい雰囲気で選んで良いと思います。良い感じのテーマが見つかったらクローンしてきます。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes</div><div class="line">git <span class="built_in">clone</span> git@github.com:&lt;theme-auther&gt;/&lt;theme-name&gt;.git</div></pre></td></tr></table></figure>
<p>次に先ほどの<code>_config.yml</code>を書き換えます。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="attr">theme:</span> &lt;theme-name<span class="string">&gt;</span></div></pre></td></tr></table></figure>
<p>これでテーマが適応されました、<code>hexo server</code>して実際に見てみてください。<br>テーマの細かい設定はそれぞれのテーマの<code>themes/&lt;theme-name&gt;/_config.yml</code>を変更することで可能です。<br>ある程度気にいる形になったらデプロイして公開しましょう!</p>
<p>テーマやスタイルシートを変更した後にデプロイしてもデザインが変更されないことがあると思いますが、これは下のコマンドで解決することができます。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>この後に再びデプロイしてみてください、テーマやデザインシートの変更が反映されていると思います!</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Hexoを使ってブログを公開する方法を書きました。<br>Hexoは静的サイトの構築が本当に簡単にできる素晴らしいツールだと思います、テーマも非常に完成度が高いものが多いので一瞬にしてそれなりにちゃんとしたブログが作れてしまうのは本当に驚きです。<br>ただHexoを使っていてひとつ辛いのは中国圏のユーザーが多いので英語ではなく中国語のドキュメント、ディスカッションが多いという点です、英語ならそれなりに読めますが中国語は辛い…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;なぜHexoなのか&quot;&gt;&lt;a href=&quot;#なぜHexoなのか&quot; class=&quot;headerlink&quot; title=&quot;なぜHexoなのか&quot;&gt;&lt;/a&gt;なぜHexoなのか&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.jsでやれる&lt;/li&gt;
&lt;li&gt;めっちゃ簡単に静的サイトを構築
    
    </summary>
    
    
      <category term="hexo" scheme="http://t-hiroyoshi.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://t-hiroyoshi.github.io/tags/github/"/>
    
      <category term="javascript" scheme="http://t-hiroyoshi.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
